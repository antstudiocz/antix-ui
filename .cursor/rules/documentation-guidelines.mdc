---
description: Pravidla pro dokumentaci komponent a k√≥du
globs: 
alwaysApply: false
---
# Antix UI - Dokumentace üìö

## Struktura dokumentace

Dokumentace v projektu Antix UI je organizov√°na v nƒõkolika √∫rovn√≠ch:

1. **Projektov√° dokumentace** - informace o cel√©m projektu
2. **Komponentov√° dokumentace** - informace o ka≈æd√© komponentƒõ
3. **API dokumentace** - detailn√≠ popis API ka≈æd√© komponenty
4. **U≈æivatelsk√° dokumentace** - n√°vody a p≈ô√≠klady pro u≈æivatele knihovny

#ura dokumentace

```
antix-ui/
‚îú‚îÄ‚îÄ README.md           # Hlavn√≠ dokumentace projektu
‚îú‚îÄ‚îÄ CHANGELOG.md        # Historie zmƒõn
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docs/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ README.md  # Dokumentace komponenty
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ   ‚îú‚îÄ‚îÄ styles/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docs/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ README.md  # Dokumentace styl≈Ø
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îî‚îÄ‚îÄ examples/           # Uk√°zkov√© implementace
    ‚îú‚îÄ‚îÄ README.md       # Dokumentace p≈ô√≠klad≈Ø
    ‚îî‚îÄ‚îÄ ...
```

## Jazyk dokumentace

**Ve≈°ker√° dokumentace v projektu mus√≠ b√Ωt ps√°na anglicky**. To zahrnuje:
- README soubory
- Koment√°≈ôe v k√≥du
- Dokumentaƒçn√≠ soubory
- Popisky v p≈ô√≠kladech
- Commit messages (ty mohou obsahovat tak√© emotikony)

## Projektov√° dokumentace

### README.md

Hlavn√≠ soubor README.md v ko≈ôenu projektu by mƒõl obsahovat:

1. **Title and logo** - n√°zev a identita projektu
2. **Description** - struƒçn√Ω popis knihovny a jej√≠ho √∫ƒçelu
3. **Installation** - instrukce pro instalaci
4. **Quick start** - jednoduch√Ω p≈ô√≠klad pou≈æit√≠
5. **Main features** - seznam kl√≠ƒçov√Ωch funkc√≠ a komponent
6. **Documentation** - odkazy na podrobnƒõj≈°√≠ dokumentaci
7. **License** - informace o licenci

P≈ô√≠klad:

````markdown
# Antix UI üé®

> Modern React UI library for fast development

## Installation

```bash
npm install @antixuser/antix-ui
```

## Quick start

```tsx
import { Button } from '@antixuser/antix-ui';

function App() {
  return <Button variant="solid" color="primary">Click me</Button>;
}
```

## Main components

- Button - flexible button with many variants
- ProductCard - customizable product card component

## Documentation

For more detailed documentation, see [docs](mdc:docs).

## Li

MIT
````

### CHANGELOG.md

Soubor CHANGELOG.md mus√≠ dodr≈æovat form√°t popsan√Ω v [pravidlech verzov√°n√≠](mdc:version-release.mdc).

## Komponentov√° dokumentace

Ka≈æd√° komponenta by mƒõla m√≠t vlastn√≠ dokumentaci v adres√°≈ôi `docs/`.

### Struktura dokumentace komponenty

Soubor `components/ComponentName/docs/README.md` by mƒõl obsahovat:

1. **Title and description** - jm√©no komponenty a jej√≠ √∫ƒçel
2. **Import** - uk√°zka importu
3. **Basic usage** - z√°kladn√≠ p≈ô√≠klady
4. **Props** - popis v≈°ech props
5. **Variants** - popis r≈Øzn√Ωch variant komponenty
6. **Advanced usage** - slo≈æitƒõj≈°√≠ p≈ô√≠klady
7. **Accessibility** - informace o a11y
8. **Notes** - dal≈°√≠ relevantn√≠ informace

P≈ô√≠klad:

````markdown
# Button

Button component provides a flexible button with various variants, colors, and sizes.

## Import

```tsx
import { Button } from '@antixuser/antix-ui';
```

## Basic usage

```tsx
<Button variant="solid" color="primary">Click me</Button>
```

## Props

| Prop | Type | Default | Description |
|------|-----|---------|-------|
| variant | 'solid' \| 'outlined' \| 'text' | 'solid' | Button variant |
| color | 'primary' \| 'secondary' \| 'conversion' | 'conversion' | Button color |
| size | 'sm' \| 'md' \| 'lg' \| 'xl' | 'md' | Button size |
| icon | ReactNode | - | Button icon |
| iconPosition | 'left' \| 'right' | 'left' | Icon position |
| additionalText | string | - | Additional text below main content |
| asChild | boolean | false | Whether to merge props onto child |
| className | string | - | Additional CSS classes |
| disabled | boolean | false | Whether the button is disabled |
| onClick | () => void | - | Function called when the button is clicked |
| ...rest | ButtonHTMLAttributes<HTMLButtonElement> | - | Native button attributes |

## Variants

### Solid

```tsx
<Button variant="solid" color="primary">Solid Button</Button>
```

### Outlined

```tsx
<Button variant="outlined" color="primary">Outlined Button</Button>
```

### Text

```tsx
<Button variant="text" color="primary">Text Button</Button>
```

## Colors

### Primary

```tsx
<Button variant="solid" color="primary">Primary Button</Button>
```

### Secondary

```tsx
<Button variant="solid" color="secondary">Secondary Button</Button>
```

### Conversion

```tsx
<Button variant="solid" color="conversion">Conversion Button</Button>
```

## Advanced usage

### With icon

```tsx
<Button
  variant="solid"
  color="primary"
  icon={<SearchIcon />}
  iconPosition="left"
>
  Search
</Button>
```

### With additional text

```tsx
<Button
  variant="solid"
  color="conversion"
  additionalText="Free shipping"
>
  Add to cart
</Button>
```

## Accessibility

The Button component is fully accessible:
- Uses native `<button>` element
- Supports keyboard navigation
- Appropriate ARIA attributes
- Focus states with visible outlines
````

## API dokumentace

### TypeScript typy

V≈°echny komponenty a jejich props by mƒõly b√Ωt peƒçlivƒõ typov√°ny pomoc√≠ TypeScript. Tyto typy slou≈æ√≠ jako API dokumentace:

```typescript
export type ButtonVariant = "solid" | "outlined" | "text";
export type ButtonColor = "conversion" | "primary" | "secondary";
export type ButtonSize = "xl" | "lg" | "md" | "sm";
export type ButtonIconPosition = "left" | "right";

export interface ButtonProps
  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, "color">,
    Omit<VariantProps<typeof buttonVariants>, "className" | "withIcon"> {
  /** Allows the button to be rendered as a different element */
  asChild?: boolean;
  /** Icon element to be displayed alongside the button text */
  icon?: React.ReactNode;
  /** Additional text to be displayed below the main button text */
  additionalText?: string;
  /** Additional CSS classes to be applied to the button */
  className?: string;
}
```

### JSDoc Koment√°≈ôe

Pou≈æ√≠vejte JSDoc koment√°≈ôe pro dokumentaci funkc√≠, komponent a slo≈æitƒõj≈°√≠ch logick√Ωch blok≈Ø:

```typescript
/**
 * Button component with multiple variants, sizes, and colors
 *
 * @param variant - Visual style of the button ("solid", "outlined", "text")
 * @param size - Size of the button ("xl", "lg", "md", "sm")
 * @param color - Color scheme of the button ("conversion", "primary", "secondary")
 * @param iconPosition - Position of the icon relative to text ("left", "right")
 * @param asChild - Whether to render the button as a child component
 * @param icon - Icon element to display
 * @param additionalText - Secondary text to display below main text
 * @param children - Primary content of the button
 * @param disabled - Whether the button is disabled
 */
export const Button = ({
  // props
}: ButtonProps) => {
  // implementation
};
```

## Dokumentace styl≈Ø

### Tailwind a CVA

Dokumentujte pou≈æ√≠v√°n√≠ Tailwind CSS a CVA v komponent√°ch:

````markdown
# Styling System

## Tailwind CSS

Antix UI uses Tailwind CSS for styling components. This provides consistent design patterns and simplifies development.

## Class Variance Authority (CVA)

For components with multiple variants, we use CVA to define variant styles:

```tsx
const buttonVariants = cva(
  // Base classes applied to all buttons
  "inline-flex items-center justify-center whitespace-nowrap rounded-lg font-secondary font-bold transition-all duration-200 text-center relative overflow-hidden cursor-pointer",
  {
    variants: {
      variant: {
        solid: "",
        outlined: "bg-transparent outline outline-[1.67px] outline-offset-[-1.67px]",
        text: "bg-transparent p-[2px]",
      },
      size: {
        sm: "px-3.5 py-2 text-button-md",
        md: "px-3.5 py-3 text-button-lg",
        lg: "px-6 py-3.5 text-button-xl",
        xl: "px-7 py-4.5 text-button-xl",
      },
      // Additional variants...
    },
    defaultVariants: {
      variant: "solid",
      size: "md",
      // Default values for other variants...
    },
    compoundVariants: [
      // Combinations of variants
      {
        variant: "solid",
        color: "primary",
        className: "bg-gradient-to-r to-primary-500 from-highlight-300 hover:before:opacity-100",
      },
      // Additional combinations...
    ],
  }
);
```

## CSS Variables

We use CSS variables for foundational design tokens:

- Colors: `--color-primary-500`, `--color-secondary-300`, etc.
- Typography: `--font-button-xl`, `--font-body-l`, etc.
- Component-specific: `--product-card-width`, `--button-border-radius`, etc.

## Dark Mode

Components support dark mode through Tailwind's `dark:` variant:

```tsx
<div className="bg-neutral-00 text-secondary-800 dark:bg-neutral-900 dark:text-neutral-100">
  Content with dark mode support
</div>
```
````

## U≈æivatelsk√° dokumentace

### P≈ô√≠klady

Pro ka≈ædou komponentu by mƒõl existovat p≈ô√≠klad v adres√°≈ôi `examples/`:

```tsx
// examples/ButtonDemo/ButtonVariantsDemo.tsx
import React from 'react';
import { Button } from '../../src/components';

export const ButtonVariantsDemo: React.FC = () => {
  return (
    <div className="space-y-8">
      <h2 className="text-2xl font-bold">Button Variants</h2>
      
      <div className="space-y-4">
        <h3 className="text-xl font-semibold">Solid Buttons</h3>
        <div className="flex flex-wrap gap-4">
          <Button variant="solid" color="primary">Primary</Button>
          <Button variant="solid" color="secondary">Secondary</Button>
          <Button variant="solid" color="conversion">Conversion</Button>
        </div>
      </div>
      
      <div className="space-y-4">
        <h3 className="text-xl font-semibold">Outlined Buttons</h3>
        <div className="flex flex-wrap gap-4">
          <Button variant="outlined" color="primary">Primary</Button>
          <Button variant="outlined" color="secondary">Secondary</Button>
          <Button variant="outlined" color="conversion">Conversion</Button>
        </div>
      </div>
      
      <div className="space-y-4">
        <h3 className="text-xl font-semibold">Text Buttons</h3>
        <div className="flex flex-wrap gap-4">
          <Button variant="text" color="primary">Primary</Button>
          <Button variant="text" color="secondary">Secondary</Button>
          <Button variant="text" color="conversion">Conversion</Button>
        </div>
      </div>
    </div>
  );
};
```

## Maintanence

### Aktualizace dokumentace

- Dokumentace mus√≠ b√Ωt aktualizov√°na p≈ôi ka≈æd√© zmƒõnƒõ API
- P≈ôed vyd√°n√≠m nov√© verze zkontrolujte, ≈æe dokumentace je aktu√°ln√≠
- Hlavn√≠ README.md by mƒõl ukazovat na aktu√°ln√≠ verzi knihovny

### Jazykov√° spr√°vnost

- Dokumentace mus√≠ b√Ωt gramaticky spr√°vn√°
- Pou≈æ√≠vejte konzistentn√≠ terminologii nap≈ô√≠ƒç dokumentac√≠
- Udr≈æujte konzistentn√≠ form√°tov√°n√≠ a styly

## Automatick√© generov√°n√≠ dokumentace

Pro generov√°n√≠ API dokumentace z TypeScript typ≈Ø a JSDoc koment√°≈ô≈Ø lze pou≈æ√≠t n√°stroje jako TypeDoc, ale v souƒçasn√© dobƒõ se nepou≈æ√≠vaj√≠. Ve≈°ker√° dokumentace se vytv√°≈ô√≠ a udr≈æuje ruƒçnƒõ.

## P≈ô√≠klady dobr√© dokumentace

- Jasn√© a struƒçn√© popisy
- P≈ô√≠klady pou≈æit√≠ pro ka≈ædou komponentu
- Uk√°zky v≈°ech variant a mo≈ænost√≠
- Informace o p≈ô√≠stupnosti
- Odkazy na souvisej√≠c√≠ komponenty a koncepty