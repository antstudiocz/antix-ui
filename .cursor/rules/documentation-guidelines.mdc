---
description: Pravidla pro dokumentaci komponent a k√≥du
globs: 
alwaysApply: false
---
# Antix UI - Dokumentace üìö

## Struktura dokumentace

Dokumentace v projektu Antix UI je organizov√°na v nƒõkolika √∫rovn√≠ch:

1. **Projektov√° dokumentace** - informace o cel√©m projektu
2. **Komponentov√° dokumentace** - informace o ka≈æd√© komponentƒõ
3. **API dokumentace** - detailn√≠ popis API ka≈æd√© komponenty
4. **U≈æivatelsk√° dokumentace** - n√°vody a p≈ô√≠klady pro u≈æivatele knihovny

### Adres√°≈ôov√° struktura dokumentace

```
antix-ui/
‚îú‚îÄ‚îÄ README.md           # Hlavn√≠ dokumentace projektu
‚îú‚îÄ‚îÄ CHANGELOG.md        # Historie zmƒõn
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docs/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ README.md  # Dokumentace komponenty
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ   ‚îú‚îÄ‚îÄ styles/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docs/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ README.md  # Dokumentace styl≈Ø
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îî‚îÄ‚îÄ examples/           # Uk√°zkov√© implementace
    ‚îú‚îÄ‚îÄ README.md       # Dokumentace p≈ô√≠klad≈Ø
    ‚îî‚îÄ‚îÄ ...
```

## Jazyk dokumentace

**Ve≈°ker√° dokumentace v projektu mus√≠ b√Ωt ps√°na anglicky**. To zahrnuje:
- README soubory
- Koment√°≈ôe v k√≥du
- Dokumentaƒçn√≠ soubory
- Popisky v p≈ô√≠kladech
- Commit messages (ty mohou obsahovat tak√© emotikony)

## Projektov√° dokumentace

### README.md

Hlavn√≠ soubor README.md v ko≈ôenu projektu by mƒõl obsahovat:

1. **Title and logo** - n√°zev a identita projektu
2. **Description** - struƒçn√Ω popis knihovny a jej√≠ho √∫ƒçelu
3. **Installation** - instrukce pro instalaci
4. **Quick start** - jednoduch√Ω p≈ô√≠klad pou≈æit√≠
5. **Main features** - seznam kl√≠ƒçov√Ωch funkc√≠ a komponent
6. **Documentation** - odkazy na podrobnƒõj≈°√≠ dokumentaci
7. **License** - informace o licenci

P≈ô√≠klad:

```markdown
# Antix UI üé®

> Modern React UI library for fast development

## Installation

```bash
npm install @antixuser/antix-ui
```

## Quick start

```tsx
import { Button } from '@antixuser/antix-ui';

function App() {
  return <Button variant="primary">Click me</Button>;
}
```

## Main components

- Button - flexible button with many variants
- ProductCard - product card with i18n support

## Documentation

For more detailed documentation, see [docs](mdc:docs).

## License

MIT
```

### CHANGELOG.md

Soubor CHANGELOG.md mus√≠ dodr≈æovat form√°t popsan√Ω v [pravidlech verzov√°n√≠](mdc:version-release.mdc).

## Komponentov√° dokumentace

Ka≈æd√° komponenta by mƒõla m√≠t vlastn√≠ dokumentaci v adres√°≈ôi `docs/`.

### Struktura dokumentace komponenty

Soubor `components/ComponentName/docs/README.md` by mƒõl obsahovat:

1. **Title and description** - jm√©no komponenty a jej√≠ √∫ƒçel
2. **Import** - uk√°zka importu
3. **Basic usage** - z√°kladn√≠ p≈ô√≠klady
4. **Props** - popis v≈°ech props
5. **Variants** - popis r≈Øzn√Ωch variant komponenty
6. **Advanced usage** - slo≈æitƒõj≈°√≠ p≈ô√≠klady
7. **Accessibility** - informace o a11y
8. **Notes** - dal≈°√≠ relevantn√≠ informace

P≈ô√≠klad:

```markdown
# Button

Button component provides a flexible button with various variants and sizes.

## Import

```tsx
import { Button } from '@antixuser/antix-ui';
```

## Basic usage

```tsx
<Button variant="solid" color="primary">Click me</Button>
```

## Props

| Prop | Type | Default | Description |
|------|-----|---------|-------|
| variant | 'solid' \| 'outlined' \| 'text' | 'solid' | Button variant |
| color | 'primary' \| 'secondary' \| 'conversion' | 'conversion' | Button color |
| size | 'sm' \| 'md' \| 'lg' \| 'xl' | 'md' | Button size |
| fullWidth | boolean | false | Whether the button should fill the full width |
| icon | ReactNode | - | Button icon |
| iconPosition | 'left' \| 'right' | 'left' | Icon position |
| disabled | boolean | false | Whether the button is disabled |
| onClick | () => void | - | Function called when the button is clicked |

## Variants

### Solid

```tsx
<Button variant="solid" color="primary">Solid Button</Button>
```

### Outlined

```tsx
<Button variant="outlined" color="primary">Outlined Button</Button>
```

### Text

```tsx
<Button variant="text" color="primary">Text Button</Button>
```

## Advanced usage

### With icon

```tsx
<Button
  variant="solid"
  color="primary"
  icon={<IconComponent />}
  iconPosition="left"
>
  Button with Icon
</Button>
```

## Accessibility

Button component is fully accessible and supports keyboard navigation.
```

## API dokumentace

### TypeScript typy

V≈°echny komponenty a jejich props by mƒõly b√Ωt peƒçlivƒõ typov√°ny pomoc√≠ TypeScript. Tyto typy slou≈æ√≠ jako API dokumentace:

```typescript
export interface ButtonProps {
  variant?: 'solid' | 'outlined' | 'text';
  color?: 'primary' | 'secondary' | 'conversion';
  size?: 'sm' | 'md' | 'lg' | 'xl';
  // ... other props
}
```

## U≈æivatelsk√° dokumentace

### P≈ô√≠klady

Pro ka≈ædou komponentu by mƒõl existovat p≈ô√≠klad v adres√°≈ôi `examples/`:

```tsx
// examples/ButtonDemo/ButtonVariantsDemo.tsx
import React from 'react';
import { Button } from '../../src/components';
import styles from './ButtonVariantsDemo.module.css';

export const ButtonVariantsDemo: React.FC = () => {
  return (
    <div className={styles.container}>
      <h2>Button Variants</h2>
      
      <div className={styles.section}>
        <h3>Solid Buttons</h3>
        <div className={styles.buttonRow}>
          <Button variant="solid" color="primary">Primary</Button>
          <Button variant="solid" color="secondary">Secondary</Button>
          <Button variant="solid" color="conversion">Conversion</Button>
        </div>
      </div>
      
      <div className={styles.section}>
        <h3>Outlined Buttons</h3>
        <div className={styles.buttonRow}>
          <Button variant="outlined" color="primary">Primary</Button>
          <Button variant="outlined" color="secondary">Secondary</Button>
          <Button variant="outlined" color="conversion">Conversion</Button>
        </div>
      </div>
      
      <div className={styles.section}>
        <h3>Text Buttons</h3>
        <div className={styles.buttonRow}>
          <Button variant="text" color="primary">Primary</Button>
          <Button variant="text" color="secondary">Secondary</Button>
          <Button variant="text" color="conversion">Conversion</Button>
        </div>
      </div>
    </div>
  );
};
```

### N√°vody

Slo≈æitƒõj≈°√≠ n√°vody mohou b√Ωt um√≠stƒõny v hlavn√≠ dokumentaci:

```markdown
# How to use i18n with Antix UI

This library supports localization using i18next.

## Step 1: Setup i18n

First, set up i18next in your application:

```tsx
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';

i18n
  .use(initReactI18next)
  .init({
    resources: {
      en: {
        translation: {
          // your translations
        }
      }
    },
    lng: 'en',
    fallbackLng: 'en',
    interpolation: {
      escapeValue: false
    }
  });

export default i18n;
```

## Step 2: Use in components

Now you can use components with localization:

```tsx
import { ProductCard } from '@antixuser/antix-ui';

<ProductCard
  title="Product title"
  // additional props
/>
```
```

## Syst√©m dokumentace

### Aktualizace dokumentace

1. **P≈ôi v√Ωvoji nov√© komponenty**
   - Vytvo≈ôte dokumentaci z√°rove≈à s komponentou
   - P≈ôidejte p≈ô√≠klady pro komponenty
   - Aktualizujte hlavn√≠ README.md

2. **P≈ôi zmƒõn√°ch existuj√≠c√≠ komponenty**
   - Aktualizujte dokumentaci komponenty
   - Aktualizujte p≈ô√≠klady

3. **P≈ôi vyd√°n√≠ nov√© verze**
   - Aktualizujte CHANGELOG.md
   - Aktualizujte hlavn√≠ README.md
   - Ovƒõ≈ôte, ≈æe v≈°echny zmƒõny jsou zdokumentov√°ny

### Form√°tov√°n√≠ Markdown

1. **Nadpisy**
   - Pou≈æ√≠vejte spr√°vnou hierarchii nadpis≈Ø (# pro hlavn√≠ nadpis, ## pro sekce, atd.)
   - Nadpisy by mƒõly b√Ωt struƒçn√© a v√Ωsti≈æn√©

2. **Seznamy**
   - Pou≈æ√≠vejte odr√°≈ækov√© seznamy pro polo≈æky bez po≈ôad√≠
   - Pou≈æ√≠vejte ƒç√≠slovan√© seznamy pro kroky nebo prioritizovan√© polo≈æky

3. **K√≥d**
   - Pou≈æ√≠vejte odsazen√≠ k√≥du (```) s oznaƒçen√≠m jazyka
   - Pro inline k√≥d pou≈æ√≠vejte jednoduch√© zpƒõtn√© apostrofy (`)

4. **Tabulky**
   - Pou≈æ√≠vejte tabulky pro strukturovan√© informace
   - V≈ædy zahr≈àte hlaviƒçku tabulky

5. **Zv√Ωraznƒõn√≠**
   - Pou≈æ√≠vejte **tuƒçn√Ω text** pro d≈Øle≈æit√© informace
   - Pou≈æ√≠vejte *kurz√≠vu* pro zd≈Øraznƒõn√≠
   - Pou≈æ√≠vejte `k√≥d` pro n√°zvy promƒõnn√Ωch, props, atd.

6. **Odkazy**
   - Pou≈æ√≠vejte relativn√≠ odkazy na soubory v repozit√°≈ôi
   - Pou≈æ√≠vejte absolutn√≠ URL pro extern√≠ odkazy

### Obr√°zky a diagramy

1. **Screenshoty**
   - P≈ôid√°vejte screenshoty pro zobrazen√≠ UI
   - Optimalizujte velikost obr√°zk≈Ø

2. **Diagramy**
   - Pou≈æ√≠vejte diagramy pro vysvƒõtlen√≠ slo≈æitƒõj≈°√≠ch koncept≈Ø
   - Preferujte vektorov√© form√°ty (SVG) pro diagramy

## Best Practices

1. **Aktu√°ln√≠ dokumentace**
   - Dokumentace by mƒõla b√Ωt v≈ædy aktu√°ln√≠
   - Neaktu√°ln√≠ dokumentace je hor≈°√≠ ne≈æ ≈æ√°dn√° dokumentace

2. **Jednoduchost**
   - Pi≈°te jednodu≈°e a srozumitelnƒõ
   - Vyhnƒõte se slo≈æit√Ωm technick√Ωm term√≠n≈Øm, kde to nen√≠ nutn√©

3. **P≈ô√≠klady**
   - V≈ædy dopl≈àte dokumentaci p≈ô√≠klady
   - Uka≈æte z√°kladn√≠ i pokroƒçil√© pou≈æit√≠

4. **C√≠lov√° skupina**
   - Pi≈°te dokumentaci s ohledem na v√Ωvoj√°≈ôe, kte≈ô√≠ budou knihovnu pou≈æ√≠vat
   - P≈ôedpokl√°dejte z√°kladn√≠ znalost Reactu, ale ne nutnƒõ znalost intern√≠ implementace knihovny

5. **Form√°t**
   - Dodr≈æujte konzistentn√≠ form√°t dokumentace nap≈ô√≠ƒç projektem
   - Pou≈æ√≠vejte ≈°ablony pro novou dokumentaci 