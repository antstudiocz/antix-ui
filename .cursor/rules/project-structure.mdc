---
description: 
globs: 
alwaysApply: true
---
# Antix UI - Struktura projektu üß±

## Adres√°≈ôov√° struktura

```
antix-ui/
‚îú‚îÄ‚îÄ .cursor/             # Cursor IDE konfigurace a pravidla
‚îú‚îÄ‚îÄ .husky/              # Git hooks
‚îú‚îÄ‚îÄ dist/                # Build v√Ωstup (generovan√Ω)
‚îú‚îÄ‚îÄ dist-examples/       # Build uk√°zek (generovan√Ω)
‚îú‚îÄ‚îÄ examples/            # Uk√°zkov√© implementace komponent
‚îÇ   ‚îú‚îÄ‚îÄ ButtonDemo/      # Demo pro Button komponentu
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ButtonDemo.module.css
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ButtonDemo.tsx
‚îÇ   ‚îú‚îÄ‚îÄ ProductCardDemo/ # Demo pro ProductCard komponentu
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductCardDemo.module.css
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ProductCardDemo.tsx
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ src/                 # Zdrojov√Ω k√≥d knihovny
‚îÇ   ‚îú‚îÄ‚îÄ components/      # UI komponenty
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button/      # Button komponenta
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __tests__/  # Testy
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docs/       # Dokumentace
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button.module.css
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Button.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductCard/ # ProductCard komponenta
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __tests__/  # Testy
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docs/       # Dokumentace
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductCard.module.css
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ProductCard.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts     # Exporty v≈°ech komponent
‚îÇ   ‚îú‚îÄ‚îÄ styles/          # Sd√≠len√© styly
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ foundations/ # Z√°kladn√≠ styly (barvy, typografie, apod.)
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ borders.css
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ colors.css
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ common.css
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ fonts.css
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ typography.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docs/        # Dokumentace styl≈Ø
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.css    # Vstupn√≠ bod pro styly
‚îÇ   ‚îú‚îÄ‚îÄ translations/    # P≈ôeklady pro i18n
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ locales/     # Jazykov√© mutace
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ cs/      # ƒåe≈°tina
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ en/      # Angliƒçtina
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ i18n.ts      # Konfigurace i18next
‚îÇ   ‚îú‚îÄ‚îÄ types/           # TypeScript definice
‚îÇ   ‚îî‚îÄ‚îÄ index.ts         # Hlavn√≠ vstupn√≠ bod knihovny
```

## Pravidla organizace soubor≈Ø

1. **Komponenty**
   - Ka≈æd√° komponenta mus√≠ b√Ωt ve vlastn√≠m adres√°≈ôi v `src/components/`
   - N√°zev adres√°≈ôe je v PascalCase a shoduje se s n√°zvem komponenty
   - Ka≈æd√° komponenta mus√≠ obsahovat:
     - `ComponentName.tsx` - hlavn√≠ implementace (vƒçetnƒõ export≈Ø)
     - `ComponentName.module.css` - styly (CSS moduly)
   - Testy se um√≠s≈•uj√≠ do adres√°≈ôe `__tests__/`
   - Dokumentace se um√≠s≈•uje do adres√°≈ôe `docs/`

2. **Styly**
   - Z√°kladn√≠ styly jsou v `src/styles/foundations/` a exportuj√≠ se v `src/styles/index.css`
   - CSS promƒõnn√© jsou v p≈ô√≠slu≈°n√Ωch souborech podle kategorie
   - Pro komponenty pou≈æ√≠v√°me CSS moduly s n√°zvem `ComponentName.module.css`
   - Komponentnƒõ specifick√© CSS promƒõnn√© jsou definovan√© v CSS modulu dan√© komponenty
   
3. **P≈ôeklady**
   - P≈ôeklady jsou organizovan√© podle jazyka v `src/translations/locales/`
   - Ka≈æd√° komponenta m√° sv√© p≈ôeklady v samostatn√©m souboru

4. **Uk√°zky**
   - Ka≈æd√° komponenta by mƒõla m√≠t uk√°zkovou implementaci v `examples/`
   - Uk√°zky pou≈æ√≠vaj√≠ stejnou strukturu jako komponenty

5. **Buildov√°n√≠**
   - V√Ωstupn√≠ adres√°≈ôe `dist/` a `dist-examples/` nejsou verzovan√©
   - Konfiguraƒçn√≠ soubory pro build jsou v ko≈ôenov√©m adres√°≈ôi

## Import a Export konvence

1. **Export komponent**
   ```typescript
   // src/components/Button/Button.tsx
   export interface ButtonProps { ... }
   export const Button = ({ ... }) => { ... };
   
   // src/components/index.ts
   export * from './Button/Button';
   export * from './ProductCard/ProductCard';
   ```

2. **Import komponent**
   ```typescript
   // Preferovan√Ω zp≈Øsob importu
   import { Button } from '../../src/components';
   
   // Alternativn√≠ zp≈Øsob
   import { Button } from '../../src/components/Button/Button';
   ```

## Doporuƒçen√≠

1. **Izolace soubor≈Ø**: Udr≈æujte logick√© celky pohromadƒõ v jedn√© slo≈æce.
2. **Znovupou≈æitelnost**: Nevytv√°≈ôejte duplicity, vyu≈æ√≠vejte sd√≠len√Ωch komponent a styl≈Ø.
3. **Modularita**: Komponenty vytv√°≈ôejte s ohledem na znovupou≈æit√≠ nap≈ô√≠ƒç projekty.
4. **Dokumentace**: Ka≈æd√° slo≈æka by mƒõla obsahovat README.md s vysvƒõtlen√≠m √∫ƒçelu a pou≈æit√≠.
5. **Konzistence**: Dodr≈æujte jednotnou strukturu nap≈ô√≠ƒç projektem.