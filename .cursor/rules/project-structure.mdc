---
description: 
globs: 
alwaysApply: true
---
# Antix UI - Struktura projektu üß±

## Adres√°≈ôov√° struktura

```
antix-ui/
‚îú‚îÄ‚îÄ .cursor/             # Cursor IDE konfigurace a pravidla
‚îú‚îÄ‚îÄ .husky/              # Git hooks
‚îú‚îÄ‚îÄ dist/                # Build v√Ωstup (generovan√Ω)
‚îú‚îÄ‚îÄ dist-examples/       # Build uk√°zek (generovan√Ω)
‚îú‚îÄ‚îÄ examples/            # Uk√°zkov√© implementace komponent
‚îÇ   ‚îú‚îÄ‚îÄ ButtonDemo/      # Demo pro Button komponentu
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ButtonVariantsDemo.tsx
‚îÇ   ‚îú‚îÄ‚îÄ ProductCardDemo/ # Demo pro ProductCard komponentu
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductCardDemo.tsx
‚îÇ   ‚îú‚îÄ‚îÄ LibraryDemo.tsx  # Hlavn√≠ demo aplikace
‚îÇ   ‚îú‚îÄ‚îÄ main.tsx         # Vstupn√≠ bod pro demo
‚îÇ   ‚îú‚îÄ‚îÄ index.html       # HTML ≈°ablona pro demo
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ src/                 # Zdrojov√Ω k√≥d knihovny
‚îÇ   ‚îú‚îÄ‚îÄ components/      # UI komponenty
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button/      # Button komponenta
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __tests__/  # Testy
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docs/       # Dokumentace
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Button.tsx  # Implementace komponenty
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductCard/ # ProductCard komponenta
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __tests__/  # Testy
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docs/       # Dokumentace
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ProductCard.tsx # Implementace komponenty
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Popover/     # Popover komponenta
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __tests__/  # Testy
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docs/       # Dokumentace
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Popover.tsx # Implementace komponenty
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Sheet/       # Sheet komponenta
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __tests__/  # Testy
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docs/       # Dokumentace
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Sheet.tsx   # Implementace komponenty
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts     # Exporty v≈°ech komponent
‚îÇ   ‚îú‚îÄ‚îÄ icons/           # SVG ikony jako React komponenty
‚îÇ   ‚îú‚îÄ‚îÄ lib/             # Pomocn√© funkce a utility
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ utils.ts     # Obecn√© utility
‚îÇ   ‚îú‚îÄ‚îÄ styles/          # Sd√≠len√© styly
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ foundations/ # Z√°kladn√≠ styly (barvy, typografie, apod.)
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ typography.css
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ colors.css
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ common.css
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ fonts.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/  # Stylov√© z√°vislosti pro komponenty
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docs/        # Dokumentace styl≈Ø
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.css    # Vstupn√≠ bod pro styly (obsahuje Tailwind)
‚îÇ   ‚îî‚îÄ‚îÄ types/           # TypeScript definice
‚îÇ   ‚îî‚îÄ‚îÄ index.ts         # Hlavn√≠ vstupn√≠ bod knihovny
```

## Pravidla organizace soubor≈Ø

1. **Komponenty**
   - Ka≈æd√° komponenta mus√≠ b√Ωt ve vlastn√≠m adres√°≈ôi v `src/components/`
   - N√°zev adres√°≈ôe je v PascalCase a shoduje se s n√°zvem komponenty
   - Ka≈æd√° komponenta mus√≠ obsahovat:
     - `ComponentName.tsx` - hlavn√≠ implementace (vƒçetnƒõ export≈Ø)
     - Testy se um√≠s≈•uj√≠ do adres√°≈ôe `__tests__/`
     - Dokumentace se um√≠s≈•uje do adres√°≈ôe `docs/`
   - Komponenty vyu≈æ√≠vaj√≠ Tailwind CSS pro stylov√°n√≠, nikoliv CSS moduly

2. **Z√°kladn√≠ UI elementy**
   - Z√°kladn√≠ UI komponenty jsou organizov√°ny ve vlastn√≠ch slo≈æk√°ch v `src/components/`
   - Ka≈æd√° komponenta m√° svou vlastn√≠ slo≈æku s implementac√≠, testy a dokumentac√≠

3. **Styly**
   - Projekt vyu≈æ√≠v√° kombinaci Tailwind CSS a vlastn√≠ch CSS promƒõnn√Ωch
   - Z√°kladn√≠ styly jsou v `src/styles/foundations/` a importuj√≠ se v `src/styles/index.css`
   - CSS promƒõnn√© jsou v p≈ô√≠slu≈°n√Ωch souborech podle kategorie
   - Komponentnƒõ specifick√© styly jsou definov√°ny pomoc√≠ CVA (class-variance-authority)
   
4. **Uk√°zky**
   - Ka≈æd√° komponenta by mƒõla m√≠t uk√°zkovou implementaci v `examples/`
   - Demo aplikace je implementov√°na v `examples/LibraryDemo.tsx`

5. **Ikony**
   - SVG ikony jsou implementov√°ny jako React komponenty
   - Ikony jsou um√≠stƒõny ve slo≈æce `src/icons/`

6. **Utility**
   - Pomocn√© funkce jsou um√≠stƒõny v `src/lib/`
   - CVA a cn utility jsou v `src/lib/utils.ts`

## Import a Export konvence

1. **Export komponent**
   ```typescript
   // src/components/Button/Button.tsx
   export interface ButtonProps { ... }
   export const Button = ({ ... }) => { ... };
   export default Button;
   
   // src/components/index.ts
   export * from './Button/Button';
   export * from './ProductCard/ProductCard';
   ```

2. **Import komponent**
   ```typescript
   // Preferovan√Ω zp≈Øsob importu
   import { Button } from '@/components';
   
   // Alternativn√≠ zp≈Øsob
   import { Button } from '@/components/Button/Button';
   ```

3. **Import utilit**
   ```typescript
   import { cn } from '@/lib/utils';
   ```

## Buildov√°n√≠ a publikov√°n√≠

1. **Buildov√°n√≠**
   - Pro build knihovny se pou≈æ√≠v√° Rollup: `npm run build`
   - Pro build uk√°zek se pou≈æ√≠v√° Vite: `npm run examples:build`

2. **Publikov√°n√≠**
   - Knihovna se publikuje na npm pod scope `@antixuser`
   - Pro vyd√°n√≠ nov√© verze: `npm run release:[patch|minor|major]`

## Doporuƒçen√≠

1. **Izolace soubor≈Ø**: Udr≈æujte logick√© celky pohromadƒõ v jedn√© slo≈æce.
2. **Znovupou≈æitelnost**: Nevytv√°≈ôejte duplicity, vyu≈æ√≠vejte sd√≠len√Ωch komponent a styl≈Ø.
3. **Modularita**: Komponenty vytv√°≈ôejte s ohledem na znovupou≈æit√≠ nap≈ô√≠ƒç projekty.
4. **Dokumentace**: Ka≈æd√° slo≈æka by mƒõla obsahovat README.md s vysvƒõtlen√≠m √∫ƒçelu a pou≈æit√≠.
5. **Konzistence**: Dodr≈æujte jednotnou strukturu nap≈ô√≠ƒç projektem.