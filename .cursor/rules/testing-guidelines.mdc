---
description: Pravidla pro testov√°n√≠ komponent
globs: 
alwaysApply: false
---
# Antix UI - Testov√°n√≠ komponent üß™

## Z√°kladn√≠ principy

1. **Pokryt√≠ testy**
   - Ka≈æd√° komponenta mus√≠ m√≠t 100% pokryt√≠ testy
   - Testujte v≈°echny ve≈ôejn√© API komponenty
   - U komplexn√≠ch komponent testujte okrajov√© p≈ô√≠pady

2. **Typy test≈Ø**
   - Jednotkov√© testy: testov√°n√≠ individu√°ln√≠ch funkc√≠ a komponent
   - Integraƒçn√≠ testy: testov√°n√≠ interakce mezi komponentami
   - Snapshot testy: zachycen√≠ vizu√°ln√≠ch regres√≠

3. **Test Driven Development (TDD)**
   - Preferovan√Ω p≈ô√≠stup pro v√Ωvoj nov√Ωch komponent
   - Nejprve napi≈°te testy, pak implementaci

## Struktura test≈Ø

### Organizace testovac√≠ch soubor≈Ø

- Testy umis≈•ujte do adres√°≈ôe `__tests__` uvnit≈ô adres√°≈ôe komponenty
- Pou≈æ√≠vejte n√°sleduj√≠c√≠ konvence pojmenov√°n√≠:
  - Jednotkov√© testy: `ComponentName.test.tsx`
  - Snapshot testy: `ComponentName.snapshot.test.tsx`
  - Integraƒçn√≠ testy: `ComponentName.integration.test.tsx`

```
src/
‚îî‚îÄ‚îÄ components/
    ‚îî‚îÄ‚îÄ Button/
        ‚îú‚îÄ‚îÄ __tests__/
        ‚îÇ   ‚îú‚îÄ‚îÄ Button.test.tsx         # Jednotkov√© testy
        ‚îÇ   ‚îú‚îÄ‚îÄ Button.snapshot.test.tsx # Snapshot testy
        ‚îÇ   ‚îî‚îÄ‚îÄ README.md               # Dokumentace test≈Ø
        ‚îú‚îÄ‚îÄ Button.tsx
        ‚îî‚îÄ‚îÄ Button.module.css
```

### Popis test≈Ø

- Pou≈æ√≠vejte `describe` pro logick√© skupiny test≈Ø
- Pou≈æ√≠vejte `it` nebo `test` s jasn√Ωmi popisy testovan√©ho chov√°n√≠
- Pro slo≈æitƒõj≈°√≠ testy pou≈æ√≠vejte vno≈ôen√© `describe` bloky

```typescript
describe('Button', () => {
  describe('rendering', () => {
    it('renders correctly with default props', () => {
      // Test
    });
    
    it('applies different variants correctly', () => {
      // Test
    });
  });
  
  describe('interactions', () => {
    it('calls onClick handler when clicked', () => {
      // Test
    });
  });
});
```

## Testov√°n√≠ React komponent

### Z√°kladn√≠ setup

- Pou≈æ√≠vejte React Testing Library jako prim√°rn√≠ testovac√≠ n√°stroj:

```typescript
import { render, screen, fireEvent } from '@testing-library/react';
import Button from '../Button';

describe('Button', () => {
  it('renders children correctly', () => {
    render(<Button>Test Button</Button>);
    expect(screen.getByText('Test Button')).toBeInTheDocument();
  });
});
```

### Techniky testov√°n√≠

1. **Renderov√°n√≠ komponent**
   - Pou≈æ√≠vejte `render` metodu pro renderov√°n√≠ komponent
   - Testujte p≈ô√≠tomnost a spr√°vnost element≈Ø pomoc√≠ query metod:
     - `getByText`, `getByRole`, `getByTestId`, atd.

2. **Testov√°n√≠ interakc√≠**
   - Pou≈æ√≠vejte `fireEvent` nebo `userEvent` pro simulaci u≈æivatelsk√Ωch akc√≠
   - Testujte reakci komponenty na tyto akce

```typescript
it('handles click events', () => {
  const handleClick = jest.fn();
  render(<Button onClick={handleClick}>Click Me</Button>);
  
  fireEvent.click(screen.getByText('Click Me'));
  expect(handleClick).toHaveBeenCalledTimes(1);
});
```

3. **Testov√°n√≠ r≈Øzn√Ωch stav≈Ø**
   - Testujte r≈Øzn√© stavy komponenty
   - Pou≈æ√≠vejte `rerender` pro testov√°n√≠ zmƒõn props

```typescript
it('applies different variants correctly', () => {
  const { rerender } = render(<Button variant="solid">Solid</Button>);
  const solidButton = screen.getByText('Solid').closest('button');
  expect(solidButton).toHaveClass('variantSolid');
  
  rerender(<Button variant="outlined">Outlined</Button>);
  const outlinedButton = screen.getByText('Outlined').closest('button');
  expect(outlinedButton).toHaveClass('variantOutlined');
});
```

4. **Testov√°n√≠ dostupnosti**
   - Testujte p≈ô√≠stupnost komponent
   - Pou≈æ√≠vejte role-based queries: `getByRole`
   - Testujte focus management a kl√°vesov√© ovl√°d√°n√≠

```typescript
it('is accessible', () => {
  render(<Button>Accessible Button</Button>);
  expect(screen.getByRole('button')).toBeInTheDocument();
});
```

## Snapshot testy

- Pou≈æ√≠vejte snapshot testy pro detekci neoƒçek√°van√Ωch zmƒõn ve v√Ωstupu komponent
- Snapshotov√© testy oddƒõlujte od ostatn√≠ch test≈Ø

```typescript
import { render } from '@testing-library/react';
import Button from '../Button';

describe('Button Snapshots', () => {
  it('matches snapshot for solid variant', () => {
    const { container } = render(<Button variant="solid">Solid Button</Button>);
    expect(container).toMatchSnapshot();
  });
  
  it('matches snapshot for outlined variant', () => {
    const { container } = render(<Button variant="outlined">Outlined Button</Button>);
    expect(container).toMatchSnapshot();
  });
});
```

### Aktualizace snapshot≈Ø

- Spou≈°tƒõjte `npm test -- -u` pro aktualizaci snapshot≈Ø
- Peƒçlivƒõ kontrolujte zmƒõny p≈ôi aktualizaci snapshot≈Ø
- Aktualizujte snapshoty pouze kdy≈æ jsou zmƒõny oƒçek√°van√© a z√°mƒõrn√©

## Mocky a stuby

- Pou≈æ√≠vejte `jest.mock()` pro mockov√°n√≠ modul≈Ø
- Pou≈æ√≠vejte `jest.fn()` pro vytv√°≈ôen√≠ mock funkc√≠
- Mocky definujte na zaƒç√°tku test souboru nebo testu

```typescript
// Mockov√°n√≠ extern√≠ho modulu
jest.mock('../../utils/api', () => ({
  fetchData: jest.fn().mockResolvedValue({ data: 'mocked data' }),
}));

// Mock callback funkce
const handleClick = jest.fn();
```

## Testov√°n√≠ s i18n

- Pro testov√°n√≠ komponent s p≈ôekladem pou≈æijte testovac√≠ wrapper

```typescript
// testUtils.tsx
import { render } from '@testing-library/react';
import { I18nextProvider } from 'react-i18next';
import i18n from '../../translations/i18nForTests';

export const renderWithI18n = (ui: React.ReactElement) => {
  return render(
    <I18nextProvider i18n={i18n}>{ui}</I18nextProvider>
  );
};

// V testech
import { renderWithI18n } from '../../testUtils';

it('renders translated text', () => {
  renderWithI18n(<MyComponent />);
  expect(screen.getByText('Translated Text')).toBeInTheDocument();
});
```

## Testov√°n√≠ async k√≥du

- Pou≈æ√≠vejte `async/await` pro testov√°n√≠ asynchronn√≠ho k√≥du
- Pou≈æ√≠vejte `waitFor` nebo `findBy*` metody pro ƒçek√°n√≠ na asynchronn√≠ zmƒõny

```typescript
it('loads data asynchronously', async () => {
  render(<DataComponent />);
  
  // Poƒç√°teƒçn√≠ stav
  expect(screen.getByText('Loading...')).toBeInTheDocument();
  
  // ƒåek√°n√≠ na zmƒõnu stavu
  const dataElement = await screen.findByText('Loaded Data');
  expect(dataElement).toBeInTheDocument();
});
```

## Testov√°n√≠ chybov√Ωch stav≈Ø

- Testujte chybov√© stavy a zpracov√°n√≠ chyb
- Pou≈æ√≠vejte re√°ln√© objekty chyb
- Testujte rendery pro chybov√© stavy

```typescript
it('handles error state correctly', async () => {
  // Mock API vrac√≠ chybu
  apiMock.fetchData.mockRejectedValueOnce(new Error('Network error'));
  
  render(<DataComponent />);
  
  // ƒåek√°n√≠ na chybovou zpr√°vu
  const errorMessage = await screen.findByText('Error: Network error');
  expect(errorMessage).toBeInTheDocument();
});
```

## Testov√°n√≠ CSS modul≈Ø

- Testujte aplikaci CSS t≈ô√≠d a styl≈Ø
- V testech importujte skuteƒçn√Ω CSS modul (jest je spr√°vnƒõ konfigurov√°n)

```typescript
it('applies the correct CSS class', () => {
  render(<Button variant="solid">Test Button</Button>);
  const button = screen.getByText('Test Button');
  expect(button).toHaveClass('variantSolid');
});
```

## Dokumentace test≈Ø

- Ka≈æd√° slo≈æka s testy mus√≠ obsahovat `README.md` s informacemi o:
  - Jak√© testovac√≠ sc√©n√°≈ôe pokr√Ωv√°
  - Jak spustit testy
  - Jak p≈ôidat nov√© testy
  - Specifick√© implementaƒçn√≠ detaily

## Roz≈°√≠≈ôen√© techniky

1. **Test Custom Hooks**
   - Pou≈æ√≠vejte `renderHook` z `@testing-library/react-hooks` pro testov√°n√≠ custom hooks
   
2. **Test Performance**
   - Pou≈æ√≠vejte `@testing-library/react-hooks` pro testov√°n√≠ performance optimizac√≠
   
3. **Test Pokryt√≠**
   - Pou≈æ√≠vejte `npm run test:coverage` pro generov√°n√≠ reportu pokryt√≠ testy
   - Analyzujte pokryt√≠ a identifikujte nepokryt√© ƒç√°sti k√≥du