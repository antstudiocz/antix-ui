---
description: Pravidla pro testov√°n√≠ komponent
globs: 
alwaysApply: false
---
# Antix UI - Testov√°n√≠ komponent üß™

## Z√°kladn√≠ principy

1. **Pokryt√≠ testy**
   - Ka≈æd√° komponenta mus√≠ m√≠t 100% pokryt√≠ testy
   - Testujte v≈°echny ve≈ôejn√© API komponenty
   - U komplexn√≠ch komponent testujte okrajov√© p≈ô√≠pady

2. **Typy test≈Ø**
   - Jednotkov√© testy: testov√°n√≠ individu√°ln√≠ch funkc√≠ a komponent
   - Integraƒçn√≠ testy: testov√°n√≠ interakce mezi komponentami
   - Snapshot testy: zachycen√≠ vizu√°ln√≠ch regres√≠

3. **Test Driven Development (TDD)**
   - Preferovan√Ω p≈ô√≠stup pro v√Ωvoj nov√Ωch komponent
   - Nejprve napi≈°te testy, pak implementaci

## Struktura test≈Ø

### Organizace testovac√≠ch soubor≈Ø

- Testy umis≈•ujte do adres√°≈ôe `__tests__` uvnit≈ô adres√°≈ôe komponenty
- Pou≈æ√≠vejte n√°sleduj√≠c√≠ konvence pojmenov√°n√≠:
  - Jednotkov√© testy: `ComponentName.test.tsx`
  - Snapshot testy: `ComponentName.snapshot.test.tsx`
  - Integraƒçn√≠ testy: `ComponentName.integration.test.tsx`

```
src/
‚îî‚îÄ‚îÄ components/
    ‚îî‚îÄ‚îÄ Button/
        ‚îú‚îÄ‚îÄ __tests__/
        ‚îÇ   ‚îú‚îÄ‚îÄ Button.test.tsx         # Jednotkov√© testy
        ‚îÇ   ‚îú‚îÄ‚îÄ Button.snapshot.test.tsx # Snapshot testy
        ‚îÇ   ‚îî‚îÄ‚îÄ README.md               # Dokumentace test≈Ø
        ‚îî‚îÄ‚îÄ Button.tsx
```

### Popis test≈Ø

- Pou≈æ√≠vejte `describe` pro logick√© skupiny test≈Ø
- Pou≈æ√≠vejte `it` nebo `test` s jasn√Ωmi popisy testovan√©ho chov√°n√≠
- Pro slo≈æitƒõj≈°√≠ testy pou≈æ√≠vejte vno≈ôen√© `describe` bloky

```typescript
describe('Button', () => {
  describe('rendering', () => {
    it('renders correctly with default props', () => {
      // Test
    });
    
    it('applies different variants correctly', () => {
      // Test
    });
  });
  
  describe('interactions', () => {
    it('calls onClick handler when clicked', () => {
      // Test
    });
  });
});
```

## Testov√°n√≠ React komponent

### Z√°kladn√≠ setup

- Pou≈æ√≠vejte React Testing Library jako prim√°rn√≠ testovac√≠ n√°stroj:

```typescript
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from '../Button';

describe('Button', () => {
  it('renders children correctly', () => {
    render(<Button>Test Button</Button>);
    expect(screen.getByText('Test Button')).toBeInTheDocument();
  });
});
```

### Techniky testov√°n√≠

1. **Renderov√°n√≠ komponent**
   - Pou≈æ√≠vejte `render` metodu pro renderov√°n√≠ komponent
   - Testujte p≈ô√≠tomnost a spr√°vnost element≈Ø pomoc√≠ query metod:
     - `getByText`, `getByRole`, `getByTestId`, atd.

2. **Testov√°n√≠ interakc√≠**
   - Pou≈æ√≠vejte `fireEvent` nebo `userEvent` pro simulaci u≈æivatelsk√Ωch akc√≠
   - Testujte reakci komponenty na tyto akce

```typescript
it('handles click events', () => {
  const handleClick = jest.fn();
  render(<Button onClick={handleClick}>Click Me</Button>);
  
  fireEvent.click(screen.getByText('Click Me'));
  expect(handleClick).toHaveBeenCalledTimes(1);
});
```

3. **Testov√°n√≠ r≈Øzn√Ωch variant**
   - Testujte v≈°echny varianty komponenty definovan√© pomoc√≠ CVA
   - Ovƒõ≈ôte spr√°vnou aplikaci t≈ô√≠d nebo styl≈Ø

```typescript
it('applies primary variant correctly', () => {
  render(<Button variant="solid" color="primary">Primary Button</Button>);
  
  const button = screen.getByText('Primary Button');
  expect(button).toHaveClass('bg-gradient-to-r');
  expect(button).toHaveClass('to-primary-500');
});
```

4. **Testov√°n√≠ p≈ô√≠stupnosti**
   - Testujte p≈ô√≠stupnost komponent pomoc√≠ role-based queries
   - Ovƒõ≈ôte spr√°vn√© atributy ARIA
   - Testujte focus management a kl√°vesov√© ovl√°d√°n√≠

```typescript
it('is accessible', () => {
  render(<Button>Accessible Button</Button>);
  
  const button = screen.getByRole('button', { name: 'Accessible Button' });
  expect(button).toBeInTheDocument();
  
  // Test kl√°vesov√Ωch ud√°lost√≠
  fireEvent.keyDown(button, { key: 'Enter' });
  // Oƒçek√°van√Ω v√Ωsledek
});
```

## Snapshot testy

- Pou≈æ√≠vejte snapshot testy pro detekci neoƒçek√°van√Ωch zmƒõn ve v√Ωstupu komponent
- Snapshotov√© testy oddƒõlujte od ostatn√≠ch test≈Ø

```typescript
import { render } from '@testing-library/react';
import { Button } from '../Button';

describe('Button Snapshots', () => {
  it('matches snapshot for solid variant', () => {
    const { container } = render(<Button variant="solid" color="primary">Solid Button</Button>);
    expect(container).toMatchSnapshot();
  });
  
  it('matches snapshot for outlined variant', () => {
    const { container } = render(<Button variant="outlined" color="primary">Outlined Button</Button>);
    expect(container).toMatchSnapshot();
  });
});
```

### Aktualizace snapshot≈Ø

- Spou≈°tƒõjte `npm test -- -u` pro aktualizaci snapshot≈Ø
- Peƒçlivƒõ kontrolujte zmƒõny p≈ôi aktualizaci snapshot≈Ø
- Aktualizujte snapshoty pouze kdy≈æ jsou zmƒõny oƒçek√°van√© a z√°mƒõrn√©

## Mocky a stuby

- Pou≈æ√≠vejte `jest.mock()` pro mockov√°n√≠ modul≈Ø
- Pou≈æ√≠vejte `jest.fn()` pro vytv√°≈ôen√≠ mock funkc√≠
- Mocky definujte na zaƒç√°tku test souboru nebo testu

```typescript
// Mockov√°n√≠ extern√≠ho modulu
jest.mock('../../utils/api', () => ({
  fetchData: jest.fn().mockResolvedValue({ data: 'mocked data' }),
}));

// Mock callback funkce
const handleClick = jest.fn();
```

## Testov√°n√≠ s i18n

- Pro testov√°n√≠ komponent s p≈ôekladem pou≈æijte testovac√≠ wrapper

```typescript
// testUtils.tsx
import { render, RenderOptions } from '@testing-library/react';
import { I18nextProvider } from 'react-i18next';
import i18n from '../../translations/i18n';

// Testovac√≠ i18n instance
i18n.changeLanguage('cs');

const AllTheProviders = ({ children }) => {
  return (
    <I18nextProvider i18n={i18n}>
      {children}
    </I18nextProvider>
  );
};

export const renderWithI18n = (ui: React.ReactElement, options?: RenderOptions) =>
  render(ui, { wrapper: AllTheProviders, ...options });

// V testech
import { renderWithI18n } from '../../testUtils';

it('renders translated text', () => {
  renderWithI18n(<ProductCard />);
  expect(screen.getByText('Do ko≈°√≠ku')).toBeInTheDocument();
});
```

## Testov√°n√≠ s Tailwind a CVA

- Testujte spr√°vnou aplikaci t≈ô√≠d p≈ôi r≈Øzn√Ωch variant√°ch a stavech
- Pou≈æijte `getComputedStyle` pro testov√°n√≠ skuteƒçn√Ωch styl≈Ø, pokud je to nutn√©

```typescript
it('applies correct Tailwind classes based on props', () => {
  render(<Button variant="solid" color="primary" size="lg">Large Button</Button>);
  
  const button = screen.getByText('Large Button');
  expect(button).toHaveClass('px-6');
  expect(button).toHaveClass('py-3.5');
});

it('combines classes correctly using cn utility', () => {
  render(<Button className="custom-class">Custom Button</Button>);
  
  const button = screen.getByText('Custom Button');
  expect(button).toHaveClass('custom-class');
  // Ovƒõ≈ôen√≠, ≈æe p≈Øvodn√≠ t≈ô√≠dy z CVA jsou st√°le aplikov√°ny
  expect(button).toHaveClass('inline-flex');
});
```

## Testov√°n√≠ asynchronn√≠ho k√≥du

- Pou≈æ√≠vejte `async/await` pro testov√°n√≠ asynchronn√≠ho k√≥du
- Pou≈æ√≠vejte `waitFor` nebo `findBy*` metody pro ƒçek√°n√≠ na asynchronn√≠ zmƒõny

```typescript
it('loads data asynchronously', async () => {
  render(<DataComponent />);
  
  // Poƒç√°teƒçn√≠ stav
  expect(screen.getByText('Loading...')).toBeInTheDocument();
  
  // ƒåek√°n√≠ na zmƒõnu stavu
  const dataElement = await screen.findByText('Loaded Data');
  expect(dataElement).toBeInTheDocument();
});
```

## Testov√°n√≠ s v√≠ce stavebn√≠mi bloky

- Pou≈æ√≠vejte kompoziƒçn√≠ wrappery pro opakovan√© setupy

```typescript
// Kombinovan√Ω wrapper pro i18n, theme, apod.
const AllProviders = ({ children }) => (
  <I18nextProvider i18n={i18n}>
    <ThemeProvider theme={theme}>
      {children}
    </ThemeProvider>
  </I18nextProvider>
);

const customRender = (ui, options) =>
  render(ui, { wrapper: AllProviders, ...options });
```

## Konfigurace Jest

- Projekt je nakonfigurov√°n s Jest a Testing Library
- CSS moduly a dal≈°√≠ assety jsou spr√°vnƒõ mockovan√©
- Snapshot testy jsou povolen√© a optimalizovan√©

```javascript
// jest.config.cjs
module.exports = {
  preset: "ts-jest",
  testEnvironment: "jsdom",
  setupFilesAfterEnv: ["<rootDir>/jest.setup.js"],
  moduleNameMapper: {
    "\\.module\\.(css|less|scss|sass)$": "identity-obj-proxy",
    "\\.(css|less|scss|sass)$": "identity-obj-proxy",
    "^@/(.*)$": "<rootDir>/src/$1",
  },
  testPathIgnorePatterns: ["/node_modules/", "/dist/"],
  collectCoverageFrom: [
    "src/**/*.{ts,tsx}",
    "!src/**/*.d.ts",
    "!src/**/*.stories.{ts,tsx}",
  ],
  coverageThreshold: {
    global: {
      branches: 100,
      functions: 100,
      lines: 100,
      statements: 100,
    },
  },
};
```

## Continuous Integration (CI)

- Testy se spou≈°t√≠ automaticky p≈ôi ka≈æd√©m push nebo pull requestu
- Kontroluje se pokryt√≠ testy
- Pull requesty s nepro≈°l√Ωmi testy nebo nedostateƒçn√Ωm pokryt√≠m nemohou b√Ωt mergov√°ny

## Best Practices

1. **Izolovan√© testy**
   - Ka≈æd√Ω test by mƒõl b√Ωt nez√°visl√Ω na ostatn√≠ch
   - Cleanup po testech pomoc√≠ `afterEach`

2. **P≈ô√≠stupnost**
   - Testujte komponenty z pohledu u≈æivatele
   - Pou≈æ√≠vejte role-based queries m√≠sto testID nebo selektor≈Ø

3. **Kvalita test≈Ø**
   - Jeden test by mƒõl testovat jednu vƒõc
   - Testy by mƒõly b√Ωt ƒçiteln√© a udr≈æovateln√©
   - Pou≈æ√≠vejte popisn√© n√°zvy test≈Ø

4. **Integrace v workflow**
   - Spou≈°tƒõjte testy p≈ôed commitem pomoc√≠ git hooks
   - Pravidelnƒõ kontrolujte pokryt√≠ testy