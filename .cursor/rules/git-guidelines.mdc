---
description: Pokyny pro Git workflow a konvence commitů
globs: 
alwaysApply: false
---
# Antix UI - Git Workflow 🌳

## Větvení a správa repozitáře

### Hlavní větve
- **main** - Produkční kód
  - Vždy stabilní, připravený k nasazení
  - Chráněná větev, vyžaduje code review
  - Označená verzemi (tagy)

- **development** - Vývojová větev
  - Integrační větev pro feature větve
  - Po stabilizaci se merguje do main

### Feature větve
- Vždy vytvářet z development větve
- Pojmenování: `feature/*`, `fix/*`, `docs/*`, `refactor/*`, `test/*`
- Po dokončení mergovat zpět do development

## Commit konvence

### Formát commit zprávy
```
<typ>(<oblast>): <emotikona> <stručný popis>
```

### Typy změn
- `feat`: Nová funkcionalita
- `fix`: Oprava chyby
- `docs`: Změny v dokumentaci
- `style`: Změny stylů a formátování
- `refactor`: Refaktorizace existujícího kódu
- `test`: Přidání nebo úprava testů
- `chore`: Úkoly údržby (build systém, dependence)

### Emotikony
- ✨ Nová funkcionalita
- 🐛 Oprava chyby
- 📚 Dokumentace
- 🎨 Stylování/UI
- 🔄 Refaktorizace
- ✅ Testy
- 🔧 Konfigurace

## DŮLEŽITÉ: RELEASE PROCES

### Příprava změn v development
1. **Squash commitů před mergem do main**
```bash
# Zjistit všechny commity od poslední synchronizace s main
git log --oneline main..development

# NEBO zjistit poslední X commitů (pokud je jich hodně)
git log --oneline -n 20  # Zobrazí posledních 20 commitů

# Vytvořit soubor s detailním commit message
echo "typ(oblast): 🎨 Hlavní nadpis změn

✨ První popis změny
🐛 Druhý popis změny
📚 Třetí popis změny" > commit-message.txt

# Squash posledních X commitů
git reset --soft HEAD~X  # X nahraďte počtem commitů

# Commit s detailním popisem
git commit -F commit-message.txt

# Smazat dočasný soubor
rm commit-message.txt

# Push na origin se -f (force) - POUZE pro development!
git push -f origin development
```

### Merge a release
```bash
# 1. Přepnout na main a aktualizovat
git checkout main
git pull origin main

# 2. Merge development do main (už squashnutý)
git merge development

# 3. DŮLEŽITÉ: Nyní provést release
#    - NIKDY nepushovat změny do main bez release!
#    - Release skript automaticky pushne změny!
npm run release:patch  # nebo :minor, :major

# 4. Synchronizovat development s main
git checkout development
git fetch origin
git reset --hard origin/main
git push -f origin development
```

## Pravidla pro kvalitní commit message

### Krátký commit
```
feat(Button): ✨ Přidána nová varianta tlačítka
```

### Detailní commit (vždy používat pro merge do main)
```
feat(Button): ✨ Přidána nová varianta tlačítka

✨ Implementace outline varianty tlačítka
🎨 Vylepšeno stylování pro různé velikosti
📚 Aktualizace dokumentace a příkladů
✅ Přidány testy pro novou variantu
```

## Checklist před releasem

- [ ] Proveden squash commitů s detailním popisem
- [ ] Všechny testy procházejí (`npm test`)
- [ ] Build projektu je funkční (`npm run build`)
- [ ] Verze je vhodně zvolena podle typu změn

## Checklist po releasu

- [ ] Tag byl úspěšně vytvořen
- [ ] GitHub release byl vytvořen
- [ ] Development větev je synchronizována s main
- [ ] NPM balíček byl publikován

## Řešení běžných problémů

### Aktualizace snapshotů
```bash
npm test -- -u
git add '**/*.snap'
git commit --amend --no-edit  # Přidá snapshoty do posledního commitu
```

### Synchronizace development s main
```bash
git checkout development
git fetch origin
git reset --hard origin/main
git push -f origin development
```

## Vylepšení release procesu

### Vytvoření bohatšího changelogu
Pro vytvoření lepšího changelogu s popisem všech změn můžeme použít vlastní skript:

1. **Vytvoření skriptu pro generování changelogu**
   Vytvořte soubor `scripts/generate-changelog.js`:
   ```javascript
   const { execSync } = require('child_process');
   const fs = require('fs');
   
   // Získá poslední verzi/tag
   const getLatestTag = () => {
     return execSync('git describe --tags --abbrev=0').toString().trim();
   };
   
   // Získá předchozí verzi/tag
   const getPreviousTag = (latestTag) => {
     const tags = execSync('git tag -l --sort=-v:refname').toString().trim().split('\n');
     const index = tags.indexOf(latestTag);
     return index < tags.length - 1 ? tags[index + 1] : null;
   };
   
   // Generuje popis změn mezi tagy
   const generateChangelog = (fromTag, toTag) => {
     // Získá všechny commity s detailním popisem
     const commits = execSync(`git log ${fromTag}..${toTag} --pretty=format:"%s%n%b%n==COMMIT=="`)
       .toString().split('==COMMIT==')
       .filter(Boolean)
       .map(commit => commit.trim());
     
     // Kategorizace změn
     const features = [];
     const fixes = [];
     const docs = [];
     const other = [];
     
     for (const commit of commits) {
       const lines = commit.split('\n').filter(Boolean);
       const title = lines[0];
       const body = lines.slice(1);
       
       if (title.includes('feat') || title.includes('✨')) {
         features.push({ title, body });
       } else if (title.includes('fix') || title.includes('🐛')) {
         fixes.push({ title, body });
       } else if (title.includes('docs') || title.includes('📚')) {
         docs.push({ title, body });
       } else {
         other.push({ title, body });
       }
     }
     
     // Sestavení changelogu
     let changelog = '## Co je nového\n\n';
     
     if (features.length) {
       changelog += '### ✨ Nové funkce\n\n';
       for (const { title, body } of features) {
         changelog += `- ${title}\n`;
         if (body.length) {
           body.forEach(line => {
             if (line.trim()) changelog += `  - ${line.trim()}\n`;
           });
         }
       }
       changelog += '\n';
     }
     
     if (fixes.length) {
       changelog += '### 🐛 Opravy\n\n';
       for (const { title, body } of fixes) {
         changelog += `- ${title}\n`;
         if (body.length) {
           body.forEach(line => {
             if (line.trim()) changelog += `  - ${line.trim()}\n`;
           });
         }
       }
       changelog += '\n';
     }
     
     if (docs.length) {
       changelog += '### 📚 Dokumentace\n\n';
       for (const { title, body } of docs) {
         changelog += `- ${title}\n`;
         if (body.length) {
           body.forEach(line => {
             if (line.trim()) changelog += `  - ${line.trim()}\n`;
           });
         }
       }
       changelog += '\n';
     }
     
     if (other.length) {
       changelog += '### 🔄 Ostatní změny\n\n';
       for (const { title, body } of other) {
         changelog += `- ${title}\n`;
         if (body.length) {
           body.forEach(line => {
             if (line.trim()) changelog += `  - ${line.trim()}\n`;
           });
         }
       }
     }
     
     return changelog;
   };
   
   // Hlavní logika
   const latestTag = getLatestTag();
   const previousTag = getPreviousTag(latestTag);
   
   if (previousTag) {
     const changelog = generateChangelog(previousTag, latestTag);
     fs.writeFileSync('CHANGELOG.md', changelog);
     console.log(`Changelog vygenerován pro verze ${previousTag} -> ${latestTag}`);
   } else {
     console.log('Není k dispozici předchozí tag pro porovnání');
   }
   ```

2. **Úprava release skriptu v package.json**
   ```json
   "scripts": {
     "release:patch": "npm run build && npm version patch -m 'chore(release): 📦 bump version to %s' && node scripts/generate-changelog.js && gh release create v$(node -p \"require('./package.json').version\") -F CHANGELOG.md && npm publish && git push && git push --tags",
     "release:minor": "npm run build && npm version minor -m 'chore(release): 📦 bump version to %s' && node scripts/generate-changelog.js && gh release create v$(node -p \"require('./package.json').version\") -F CHANGELOG.md && npm publish && git push && git push --tags",
     "release:major": "npm run build && npm version major -m 'chore(release): 📦 bump version to %s' && node scripts/generate-changelog.js && gh release create v$(node -p \"require('./package.json').version\") -F CHANGELOG.md && npm publish && git push && git push --tags"
   }
   ```

### Sloučení commit změn a release do jednoho kroku

Pro sloučení commit změn a verze do jednoho kroku můžeme upravit release proces:

1. **Příprava commit message s verzí před releasem**
```bash
# 1. Přepnout na main a aktualizovat
git checkout main
git pull origin main

# 2. Merge development do main (už squashnutý)
git merge development --no-commit  # Spojení bez commitu

# 3. Získání nové verze
NEW_VERSION=$(npm version patch --no-git-tag-version)

# 4. Vytvoření commitu s verzí
git add package.json
git commit -m "feat: 🚀 Release $NEW_VERSION

✨ Nová funkcionalita 1
🐛 Oprava chyby 2"

# 5. Vytvoření tagu
git tag -a v$NEW_VERSION -m "Version $NEW_VERSION"

# 6. Publikace
npm publish

# 7. Push změn a tagu
git push && git push --tags

# 8. Synchronizace development s main
git checkout development
git fetch origin
git reset --hard origin/main
git push -f origin development
```