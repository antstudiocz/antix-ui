---
description: Pokyny pro Git workflow a konvence commitů
globs: 
alwaysApply: false
---
# Antix UI - Git Workflow 🌳

## Větvení a správa repozitáře

### Hlavní větve
- **main** - Produkční kód
  - Vždy stabilní, připravený k nasazení
  - Chráněná větev, vyžaduje code review
  - Označená verzemi (tagy)

- **development** - Vývojová větev
  - Integrační větev pro feature větve
  - Po stabilizaci se merguje do main

### Feature větve
- Vždy vytvářet z development větve
- Pojmenování: `feature/*`, `fix/*`, `docs/*`, `refactor/*`, `test/*`
- Po dokončení mergovat zpět do development

## Commit konvence

### Formát commit zprávy
```
<typ>(<oblast>): <emotikona> <stručný popis>
```

### Typy změn
- `feat`: Nová funkcionalita
- `fix`: Oprava chyby
- `docs`: Změny v dokumentaci
- `style`: Změny stylů a formátování
- `refactor`: Refaktorizace existujícího kódu
- `test`: Přidání nebo úprava testů
- `chore`: Úkoly údržby (build systém, dependence)

### Emotikony
- ✨ Nová funkcionalita
- 🐛 Oprava chyby
- 📚 Dokumentace
- 🎨 Stylování/UI
- 🔄 Refaktorizace
- ✅ Testy
- 🔧 Konfigurace

## DŮLEŽITÉ: RELEASE PROCES

### Příprava změn v development
1. **Squash commitů před mergem do main**
```bash
# Zjistit všechny commity od poslední synchronizace s main
git log --oneline main..development

# Vytvořit soubor s detailním commit message
echo "typ(oblast): 🎨 Hlavní nadpis změn

✨ První popis změny
🐛 Druhý popis změny
📚 Třetí popis změny" > commit-message.txt

# Squash posledních X commitů
git reset --soft HEAD~X  # X nahraďte počtem commitů

# Commit s detailním popisem
git commit -F commit-message.txt

# Smazat dočasný soubor
rm commit-message.txt

# Push na origin se -f (force) - POUZE pro development!
git push -f origin development
```

### Merge a release
```bash
# 1. Přepnout na main a aktualizovat
git checkout main
git pull origin main

# 2. Merge development do main (už squashnutý)
git merge development

# 3. DŮLEŽITÉ: Nyní provést release
#    - NIKDY nepushovat změny do main bez release!
#    - Release skript automaticky pushne změny!
npm run release:patch  # nebo :minor, :major

# 4. Synchronizovat development s main
git checkout development
git fetch origin
git reset --hard origin/main
git push -f origin development
```

## Pravidla pro kvalitní commit message

### Krátký commit
```
feat(Button): ✨ Přidána nová varianta tlačítka
```

### Detailní commit (vždy používat pro merge do main)
```
feat(Button): ✨ Přidána nová varianta tlačítka

✨ Implementace outline varianty tlačítka
🎨 Vylepšeno stylování pro různé velikosti
📚 Aktualizace dokumentace a příkladů
✅ Přidány testy pro novou variantu
```

## Checklist před releasem

- [ ] Proveden squash commitů s detailním popisem
- [ ] Všechny testy procházejí (`npm test`)
- [ ] Build projektu je funkční (`npm run build`)
- [ ] Verze je vhodně zvolena podle typu změn

## Checklist po releasu

- [ ] Tag byl úspěšně vytvořen
- [ ] GitHub release byl vytvořen
- [ ] Development větev je synchronizována s main
- [ ] NPM balíček byl publikován

## Řešení běžných problémů

### Aktualizace snapshotů
```bash
npm test -- -u
git add '**/*.snap'
git commit --amend --no-edit  # Přidá snapshoty do posledního commitu
```

### Synchronizace development s main
```bash
git checkout development
git fetch origin
git reset --hard origin/main
git push -f origin development
```