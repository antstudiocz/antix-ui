---
description: Pravidla pro v√Ωvoj komponent
globs: 
alwaysApply: false
---
# Antix UI - V√Ωvoj komponent üß©

## Z√°kladn√≠ struktura komponenty

Ka≈æd√° komponenta by mƒõla n√°sledovat tuto strukturu:

```typescript
import * as React from "react";
import { cn } from "@/lib/utils";
import { cva, type VariantProps } from "class-variance-authority";

// Definice variant pomoc√≠ CVA
const componentVariants = cva(
  "z√°kladn√≠-tailwind-t≈ô√≠dy", 
  {
    variants: {
      variant: {
        primary: "t≈ô√≠dy-pro-primary-variantu",
        secondary: "t≈ô√≠dy-pro-secondary-variantu",
      },
      size: {
        sm: "t≈ô√≠dy-pro-malou-velikost",
        md: "t≈ô√≠dy-pro-st≈ôedn√≠-velikost",
        lg: "t≈ô√≠dy-pro-velkou-velikost",
      },
    },
    defaultVariants: {
      variant: "primary",
      size: "md",
    },
  }
);

export interface ComponentNameProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof componentVariants> {
  /** Dokumentaƒçn√≠ koment√°≈ô pro prop */
  customProp?: string;
  /** Dokumentaƒçn√≠ koment√°≈ô pro voliteln√Ω prop */
  asChild?: boolean;
}

/**
 * Dokumentaƒçn√≠ koment√°≈ô popisuj√≠c√≠ komponentu
 */
export const ComponentName = React.forwardRef<
  HTMLDivElement, 
  ComponentNameProps
>(({
  className,
  variant,
  size,
  customProp,
  asChild = false,
  ...props
}, ref) => {
  // Logika komponenty

  return (
    <div 
      ref={ref}
      className={cn(componentVariants({ variant, size }), className)}
      {...props}
    >
      {/* Implementace UI */}
    </div>
  );
});

ComponentName.displayName = "ComponentName";

export default ComponentName;
```

## TypeScript konvence

1. **Props Interface**
   - V≈ædy pojmenujte interface pro props jako `{ComponentName}Props`
   - Interface v≈ædy exportujte pro znovupou≈æit√≠
   - Ka≈æd√Ω prop by mƒõl m√≠t dokumentaƒçn√≠ koment√°≈ô, pokud z n√°zvu nen√≠ patrn√© jeho √∫ƒçel
   - Nepovinn√© props oznaƒçte otazn√≠kem: `prop?: type`
   - Pro varianty pou≈æijte interface roz≈°i≈ôuj√≠c√≠ `VariantProps` z CVA

2. **Typov√°n√≠**
   - Pou≈æ√≠vejte explicitn√≠ typov√°n√≠: `const value: string = 'value'`
   - Komponenty vytv√°≈ôejte pomoc√≠ `React.forwardRef` pro podporu ref
   - Pro event handlery: `React.MouseEvent<HTMLButtonElement>`
   - Exportujte typy variant: `export type ComponentVariant = "primary" | "secondary";`

3. **Exporty**
   - V≈ædy exportujte named export pro komponentu: `export const Button = ...`
   - V≈ædy exportujte default export: `export default Button;`
   - Exportujte v≈°echny typy, kter√© by mohly b√Ωt u≈æiteƒçn√© pro u≈æivatele

## Tailwind a CVA

1. **Z√°kladn√≠ principy**
   - Pou≈æ√≠vejte Tailwind t≈ô√≠dy pro styly
   - Pou≈æ√≠vejte CVA (class-variance-authority) pro definov√°n√≠ variant komponent
   - Pou≈æ√≠vejte `cn` helper pro spojov√°n√≠ t≈ô√≠d

2. **Organizace variant**
   - Rozdƒõlte varianty do logick√Ωch skupin:
     ```typescript
     variants: {
       intent: { primary, secondary, danger },
       size: { sm, md, lg },
       withIcon: { true, false },
     }
     ```
   - Pou≈æ√≠vejte compound varianty pro kombinace:
     ```typescript
     compoundVariants: [
       {
         intent: "primary",
         size: "lg",
         className: "extra-t≈ô√≠dy-pro-kombinaci"
       }
     ]
     ```

3. **CSS promƒõnn√©**
   - Pro barvy, mezery atd. pou≈æ√≠vejte CSS promƒõnn√© z foundations
   - Slo≈æit√© hodnoty definujte jako CSS promƒõnn√© v glob√°ln√≠ch stylech

## Komponenty bez variant

Ne v≈°echny komponenty mus√≠ nutnƒõ vyu≈æ√≠vat CVA pro definici variant. Pro jednodu≈°≈°√≠ komponenty nebo komponenty bez variant (jako je nap≈ô√≠klad ProductCard) je mo≈æn√© pou≈æ√≠t standardn√≠ p≈ô√≠stup s Tailwind t≈ô√≠dami a `cn` helper:

```typescript
import React from "react";
import { cn } from "@/lib/utils";

export interface SimpleCardProps extends React.HTMLAttributes<HTMLDivElement> {
  /** Title text */
  title: string;
  /** Content text */
  content: string;
}

export const SimpleCard: React.FC<SimpleCardProps> = ({
  title,
  content,
  className,
  ...props
}) => {
  return (
    <div
      className={cn(
        "p-4 bg-neutral-00 rounded-lg shadow-sm",
        "flex flex-col gap-2",
        className
      )}
      {...props}
    >
      <h3 className="text-lg font-semibold">{title}</h3>
      <p>{content}</p>
    </div>
  );
};

export default SimpleCard;
```

V tƒõchto p≈ô√≠padech se zamƒõ≈ôte na:
- Spr√°vn√© typov√°n√≠ props pomoc√≠ TypeScript interfaces
- Dokumentaƒçn√≠ koment√°≈ôe pro jednotliv√© props
- Pou≈æ√≠v√°n√≠ `cn` pro kombinov√°n√≠ z√°kladn√≠ch a p≈ôed√°van√Ωch t≈ô√≠d
- Konzistentn√≠ strukturu export≈Ø (named + default)

## State management

1. **Hooks**
   - Pou≈æ√≠vejte React hooks pro state management
   - Slo≈æitou logiku extrahujte do custom hooks

```typescript
// P≈ô√≠klad custom hooku
function useComponentState(initialValue: number) {
  const [value, setValue] = React.useState(initialValue);
  
  const increment = React.useCallback(() => {
    setValue(prev => prev + 1);
  }, []);
  
  return { value, increment };
}
```

2. **Memoizace**
   - Pou≈æ√≠vejte `useMemo` pro v√Ωpoƒçetnƒõ n√°roƒçn√© operace
   - Pou≈æ√≠vejte `useCallback` pro funkce p≈ôed√°van√© jako props

## Pr√°ce s texty v komponent√°ch

1. **Centralizovan√© texty pomoc√≠ objektu**
   - V≈°echny textov√© ≈ôetƒõzce by mƒõly b√Ωt p≈ôed√°v√°ny v objektu `texts`
   - Tento objekt by mƒõl b√Ωt typov√°n pomoc√≠ interface (nap≈ô. `ComponentTexts`)
   - Pou≈æ√≠vejte popisn√© kl√≠ƒçe v objektu pro jednotliv√© textov√© ≈ôetƒõzce

```typescript
export interface ButtonTexts {
  /** Text to display inside the button */
  label?: string;
  /** Additional text for secondary action */
  secondaryLabel?: string;
}

export interface ButtonProps {
  /** All text content for the button */
  texts?: ButtonTexts;
  // Dal≈°√≠ props...
}

export const Button: React.FC<ButtonProps> = ({
  texts = {},
  ...props 
}) => {
  const { label = "Submit", secondaryLabel } = texts;
  
  return (
    <button {...props}>
      {label}
      {secondaryLabel && <span className="ml-2">{secondaryLabel}</span>}
    </button>
  );
};
```

2. **Zpƒõtn√° kompatibilita**
   - Pro backward kompatibilitu m≈Ø≈æete poskytovat i jednotliv√© textov√© props
   - V tom p≈ô√≠padƒõ tyto props oznaƒçte jako deprecated
   - Prioritizujte jednotliv√© props nad objektem `texts` pro zachov√°n√≠ zpƒõtn√© kompatibility

```typescript
export interface ButtonProps {
  /** All text content for the button */
  texts?: ButtonTexts;
  /** @deprecated Use texts.label instead */
  text?: string;
  // Dal≈°√≠ props...
}

export const Button: React.FC<ButtonProps> = ({
  texts = {},
  text,
  ...props 
}) => {
  // Prioritize direct props for backward compatibility
  const finalText = text || texts.label || "Submit";
  
  return (
    <button {...props}>
      {finalText}
    </button>
  );
};
```

3. **Aria atributy**
   - Pro p≈ô√≠stupnost pou≈æ√≠vejte aria atributy s odpov√≠daj√≠c√≠mi texty
   - Nap≈ô. `aria-label`, `aria-description` apod.

```typescript
<button 
  aria-label={texts.closeLabel || "Close"}
  onClick={onClose}
>
  <CloseIcon />
</button>
```

## Komponenty shadcn/ui

1. **Pou≈æit√≠ z√°kladn√≠ch komponent**
   - Pro bƒõ≈æn√© UI elementy pou≈æ√≠vejte prvo≈ôad√© komponenty ze slo≈æky `components/`
   - Tyto komponenty jsou zalo≈æen√© na shadcn/ui a jsou p≈ôizp≈Øsobeny pro Antix UI

2. **Vytv√°≈ôen√≠ nov√Ωch komponent**
   - Nov√© komponenty vytv√°≈ôejte nad existuj√≠c√≠mi komponentami
   - Dodr≈æujte stejnou strukturu a vzory jako ostatn√≠ komponenty

```typescript
import { Button } from "@/components/Button/Button";

export const CustomButton = ({
  children,
  ...props
}) => {
  return (
    <Button {...props}>
      {children}
    </Button>
  );
};
```

3. **Instalace nov√Ωch komponent ze shadcn/ui**
   - Pokud pot≈ôebujete novou z√°kladn√≠ komponentu, m≈Ø≈æete ji nainstalovat p≈ô√≠mo ze shadcn CLI
   - Pou≈æijte p≈ô√≠kaz `npx shadcn@latest add [component-name]`
   - Po instalaci vytvo≈ôte prvo≈ôadou komponentu ve vlastn√≠ slo≈æce podle vzoru existuj√≠c√≠ch komponent
   - V≈ædy zkontrolujte novƒõ nainstalovan√© komponenty a p≈ôizp≈Øsobte je designu Antix UI

4. **P≈ôizp≈Øsoben√≠ komponent**
   - Komponenty m≈Ø≈æete podle pot≈ôeby upravit
   - Respektujte jejich strukturu a varianty
   - Udr≈æujte konzistenci s ostatn√≠mi Antix UI komponentami

## P≈ô√≠stupnost (a11y)

1. **Z√°kladn√≠ pravidla**
   - Pou≈æ√≠vejte s√©mantick√© HTML tagy
   - P≈ôid√°vejte ARIA atributy, kde je to nutn√©
   - Zajistƒõte, ≈æe komponenty funguj√≠ s kl√°vesnic√≠
   - Poskytujte textov√© alternativy pro netextov√Ω obsah

2. **Formul√°≈ôov√© komponenty**
   - Pou≈æ√≠vejte `id` a `htmlFor` pro spojen√≠ label≈Ø s inputy
   - Poskytujte zpƒõtnou vazbu pro chyby
   - Pou≈æ√≠vejte vhodn√© inputy pro r≈Øzn√© typy dat

## Ikonky

1. **Pou≈æit√≠ ikon**
   - Ikony importujte z `@/icons`
   - Ikony jsou implementov√°ny jako React komponenty
   - Velikost a barvu ikon ≈ôiƒète pomoc√≠ Tailwind t≈ô√≠d

```typescript
import SearchIcon from "@/icons/SearchIcon";

export const SearchButton = () => {
  return (
    <Button>
      <SearchIcon className="w-4 h-4 mr-2" />
      Hledat
    </Button>
  );
};
```

## Zpƒõtn√° kompatibilita

1. **Breaking Changes**
   - Vyh√Ωbejte se breaking changes
   - Pokud jsou nevyhnuteln√©, jasnƒõ je dokumentujte
   - Preferujte p≈ôid√°v√°n√≠ nov√Ωch props nad zmƒõnou st√°vaj√≠c√≠ch

2. **Deprecated Props**
   - P≈ôed odstranƒõn√≠m oznaƒçte prop jako deprecated
   - Poskytnƒõte jasnou dokumentaci o alternativ√°ch

```typescript
interface ComponentProps {
  /** @deprecated Pou≈æijte m√≠sto toho 'newProp' */
  oldProp?: string;
  
  /** Nov√° vlastnost nahrazuj√≠c√≠ 'oldProp' */
  newProp?: string;
}
```

## V√Ωkon a optimalizace

1. **Memoizace**
   - Pou≈æ√≠vejte React.memo pro komponenty, kter√© se ƒçasto p≈ôekresluj√≠
   - Pou≈æ√≠vejte useMemo a useCallback pro optimalizaci

2. **Lazy Loading**
   - Pro vƒõt≈°√≠ komponenty vyu≈æ√≠vejte lazy loading s React.lazy
   - Rozdƒõlte velk√© komponenty na men≈°√≠ ƒç√°sti

3. **Minimalizace p≈ôekreslen√≠**
   - Vyhnƒõte se zbyteƒçn√Ωm p≈ôekreslen√≠m
   - Pou≈æ√≠vejte React.memo, useMemo, useCallback
   - Vyhnƒõte se inline funkc√≠m v props, kde je to mo≈æn√©