---
description: Pravidla pro v√Ωvoj komponent
globs: 
alwaysApply: false
---
# Antix UI - V√Ωvoj komponent üß©

## Z√°kladn√≠ struktura komponenty

Ka≈æd√° komponenta by mƒõla n√°sledovat tuto strukturu:

```typescript
import React from 'react';
import styles from './ComponentName.module.css';

export interface ComponentNameProps {
  /** Dokumentaƒçn√≠ koment√°≈ô pro prop */
  prop1: string;
  /** Dokumentaƒçn√≠ koment√°≈ô pro voliteln√Ω prop */
  prop2?: number;
}

/**
 * Dokumentaƒçn√≠ koment√°≈ô popisuj√≠c√≠ komponentu
 */
export const ComponentName: React.FC<ComponentNameProps> = ({
  prop1,
  prop2 = 10, // V√Ωchoz√≠ hodnota pro voliteln√Ω prop
}) => {
  // Logika komponenty
  
  return (
    <div className={styles.container}>
      {/* Implementace UI */}
    </div>
  );
};

export default ComponentName;
```

## TypeScript konvence

1. **Props Interface**
   - V≈ædy pojmenujte interface pro props jako `{ComponentName}Props`
   - Interface v≈ædy exportujte pro znovupou≈æit√≠
   - Ka≈æd√Ω prop by mƒõl m√≠t dokumentaƒçn√≠ koment√°≈ô, pokud z n√°zvu nen√≠ patrn√© jeho √∫ƒçel
   - Nepovinn√© props oznaƒçte otazn√≠kem: `prop?: type`

2. **Typov√°n√≠**
   - Pou≈æ√≠vejte explicitn√≠ typov√°n√≠: `const value: string = 'value'`
   - Pou≈æ√≠vejte React.FC pro funkcion√°ln√≠ komponenty: `React.FC<Props>`
   - Pou≈æ√≠vejte generick√© typy, kde je to vhodn√©: `Array<Item>`
   - Pro event handlery: `React.MouseEvent<HTMLButtonElement>`

3. **Exporty**
   - V≈ædy exportujte jak named, tak default export
   - Typy se exportuj√≠ pouze jako named export

## State management

1. **Hooks**
   - Pou≈æ√≠vejte React hooks pro state management
   - Slo≈æitou logiku extrahujte do custom hooks

```typescript
// P≈ô√≠klad custom hooku
function useComponentState(initialValue: number) {
  const [value, setValue] = React.useState(initialValue);
  
  const increment = React.useCallback(() => {
    setValue(prev => prev + 1);
  }, []);
  
  return { value, increment };
}
```

2. **Memoizace**
   - Pou≈æ√≠vejte `useMemo` pro v√Ωpoƒçetnƒõ n√°roƒçn√© operace
   - Pou≈æ√≠vejte `useCallback` pro funkce p≈ôed√°van√© jako props

## Pr√°ce s i18n

1. **Pou≈æit√≠ p≈ôeklad≈Ø**
   - Importujte `useTranslation` a po≈æ√≠vejte funkci `t()` pro p≈ôeklady
   - Konstantn√≠ texty nikdy nepou≈æ√≠vejte p≈ô√≠mo v komponentƒõ

```typescript
import { useTranslation } from 'react-i18next';

export const ComponentName: React.FC = () => {
  const { t } = useTranslation('namespace');
  
  return <button>{t('button.label')}</button>;
};
```

2. **Organizace p≈ôeklad≈Ø**
   - P≈ôeklady organizujte v souborech podle komponenty
   - Pro sd√≠len√© p≈ôeklady vytvo≈ôte separ√°tn√≠ namespace
   - V≈ædy poskytnƒõte p≈ôeklady pro v≈°echny podporovan√© jazyky

## Oddƒõlenost z√°jm≈Ø

1. **Oddƒõlen√≠ logiky od UI**
   - Oddƒõlujte business logiku od UI renderov√°n√≠
   - Pou≈æ√≠vejte custom hooks pro komplexn√≠ logiku

2. **Kompozice komponent**
   - Vytv√°≈ôejte mal√©, znovupou≈æiteln√© komponenty
   - Slo≈æitƒõj≈°√≠ komponenty skl√°dejte z men≈°√≠ch ƒç√°st√≠
   - Pou≈æ√≠vejte React children pro flexibiln√≠ kompozici

## Zpƒõtn√° kompatibilita

1. **Breaking Changes**
   - Vyh√Ωbejte se breaking changes
   - Pokud jsou nevyhnuteln√©, jasnƒõ je dokumentujte
   - Preferujte p≈ôid√°v√°n√≠ nov√Ωch props nad zmƒõnou st√°vaj√≠c√≠ch

2. **Deprecated Props**
   - P≈ôed odstranƒõn√≠m oznaƒçte prop jako deprecated
   - Poskytnƒõte jasnou dokumentaci o alternativ√°ch

```typescript
interface ComponentProps {
  /** @deprecated Pou≈æijte m√≠sto toho 'newProp' */
  oldProp?: string;
  
  /** Nov√° vlastnost nahrazuj√≠c√≠ 'oldProp' */
  newProp?: string;
}
```

## V√Ωkon a optimalizace

1. **Memoizace**
   - Pou≈æ√≠vejte React.memo pro komponenty, kter√© se ƒçasto p≈ôekresluj√≠
   - Pou≈æ√≠vejte useMemo a useCallback pro optimalizaci

2. **Lazy Loading**
   - Pro vƒõt≈°√≠ komponenty vyu≈æ√≠vejte lazy loading s React.lazy
   - Rozdƒõlte velk√© komponenty na men≈°√≠ ƒç√°sti

3. **Minimalizace p≈ôekreslen√≠**
   - Vyhnƒõte se zbyteƒçn√Ωm p≈ôekreslen√≠m
   - Pou≈æ√≠vejte React.memo, useMemo, useCallback
   - Vyhnƒõte se inline funkc√≠m v props, kde je to mo≈æn√©

## P≈ô√≠stupnost (a11y)

1. **Z√°kladn√≠ pravidla**
   - Pou≈æ√≠vejte s√©mantick√© HTML tagy
   - P≈ôid√°vejte ARIA atributy, kde je to nutn√©
   - Zajistƒõte, ≈æe komponenty funguj√≠ s kl√°vesnic√≠
   - Poskytujte textov√© alternativy pro netextov√Ω obsah

2. **Komponenty formul√°≈ô≈Ø**
   - V≈ædy spojujte labely s inputy
   - Poskytujte zpƒõtnou vazbu pro chyby
   - Pou≈æ√≠vejte vhodn√© inputy pro r≈Øzn√© typy dat

## Responsive design

1. **Flexibiln√≠ komponenty**
   - Komponenty by mƒõly b√Ωt pou≈æiteln√© v r≈Øzn√Ωch velikostech
   - Pou≈æ√≠vejte relativn√≠ jednotky (%, em, rem) m√≠sto pixel≈Ø
   - Implementujte responzivn√≠ chov√°n√≠ pomoc√≠ CSS

2. **Media Queries**
   - Pou≈æ√≠vejte standardn√≠ breakpointy definovan√© v projektu
   - Testujte komponenty na r≈Øzn√Ωch velikostech obrazovky