---
description: Pravidla pro lokalizaci a internacionalizaci
globs: 
alwaysApply: false
---
# Antix UI - Internacionalizace a lokalizaci üåê

## Z√°kladn√≠ principy

Antix UI pou≈æ√≠v√° knihovnu `i18next` a `react-i18next` pro internacionalizaci (i18n) a lokalizaci (l10n) komponent. Tento p≈ô√≠stup zaji≈°≈•uje, ≈æe komponenty mohou b√Ωt snadno pou≈æity v r≈Øzn√Ωch jazykov√Ωch verz√≠ch a lze je p≈ôizp≈Øsobit r≈Øzn√Ωm kulturn√≠m zvyklostem.

## Struktura i18n

### Adres√°≈ôov√° struktura

```
src/
‚îî‚îÄ‚îÄ translations/
    ‚îú‚îÄ‚îÄ i18n.ts              # Konfiguraƒçn√≠ soubor pro i18next
    ‚îî‚îÄ‚îÄ locales/             # Adres√°≈ô pro p≈ôeklady
        ‚îú‚îÄ‚îÄ cs/              # ƒåe≈°tina
        ‚îÇ   ‚îú‚îÄ‚îÄ common.json  # Sd√≠len√© p≈ôeklady
        ‚îÇ   ‚îî‚îÄ‚îÄ componentName.json  # P≈ôeklady pro konkr√©tn√≠ komponentu
        ‚îî‚îÄ‚îÄ en/              # Angliƒçtina
            ‚îú‚îÄ‚îÄ common.json  # Sd√≠len√© p≈ôeklady
            ‚îî‚îÄ‚îÄ componentName.json  # P≈ôeklady pro konkr√©tn√≠ komponentu
```

### Konfiguraƒçn√≠ soubor i18n.ts

Z√°kladn√≠ konfigurace i18next:

```typescript
// src/translations/i18n.ts
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';

// Import default translations
import csProductCard from './locales/cs/productCard.json';
import enProductCard from './locales/en/productCard.json';

type TranslationObject = {
  [key: string]: string | TranslationObject;
};

// Default translations
const resources = {
  cs: {
    ...csProductCard,
  },
  en: {
    ...enProductCard,
  },
};

i18n
  .use(initReactI18next)
  .init({
    resources,
    lng: 'cs', // default language
    fallbackLng: 'cs',
    interpolation: {
      escapeValue: false,
    },
  });

// Function to add or update translations
export const updateTranslations = (
  language: string,
  namespace: string,
  translations: TranslationObject
) => {
  if (!i18n.hasResourceBundle(language, namespace)) {
    i18n.addResourceBundle(language, namespace, translations);
  } else {
    i18n.addResourceBundle(language, namespace, translations, true, true);
  }
};

export default i18n;
```

## Organizace p≈ôeklad≈Ø

### Struktura p≈ôekladov√Ωch soubor≈Ø

P≈ôeklady jsou organizov√°ny podle namespace, kter√Ω odpov√≠d√° n√°zvu komponenty:

```json
// src/translations/locales/cs/productCard.json
{
  "productCard": {
    "addToCart": "Do ko≈°√≠ku"
  }
}
```

```json
// src/translations/locales/en/productCard.json
{
  "productCard": {
    "addToCart": "Add to cart"
  }
}
```

### Konvence pojmenov√°n√≠ kl√≠ƒç≈Ø

1. **Namespace** - pou≈æ√≠vejte n√°zev komponenty jako namespace:
   ```json
   {
     "componentName": {
       "key": "value"
     }
   }
   ```

2. **Hierarchie** - pou≈æ√≠vejte teƒçkovou notaci pro hierarchii:
   ```json
   {
     "form": {
       "inputs": {
         "name": "Jm√©no",
         "email": "E-mail"
       },
       "buttons": {
         "submit": "Odeslat",
         "cancel": "Zru≈°it"
       }
     }
   }
   ```

3. **Konzistence** - podobn√© koncepty by mƒõly b√Ωt pojmenov√°ny konzistentnƒõ:
   ```json
   {
     "actions": {
       "save": "Ulo≈æit",
       "edit": "Upravit",
       "delete": "Smazat"
     }
   }
   ```

## Pou≈æit√≠ p≈ôeklad≈Ø v komponent√°ch

### Z√°kladn√≠ pou≈æit√≠

Pou≈æit√≠ `useTranslation` hooku:

```tsx
import React from 'react';
import { useTranslation } from 'react-i18next';

export interface ComponentProps {
  // Ostatn√≠ props...
  translationNamespace?: string;
}

export const Component: React.FC<ComponentProps> = ({ 
  translationNamespace = 'componentName',
  // Ostatn√≠ props...
}) => {
  const { t } = useTranslation(translationNamespace);
  
  return (
    <button>
      {t('submit')}
    </button>
  );
};
```

### Namespace jako prop

Pro vƒõt≈°√≠ flexibilitu a znovupou≈æitelnost komponent poskytnƒõte mo≈ænost p≈ôeps√°n√≠ v√Ωchoz√≠ho namespace:

```tsx
export interface ProductCardProps {
  // ...ostatn√≠ props
  translationNamespace?: string;
}

export const ProductCard: React.FC<ProductCardProps> = ({
  // ...ostatn√≠ props
  translationNamespace = 'productCard',
}) => {
  const { t } = useTranslation(translationNamespace);
  
  return (
    <Button onClick={onAddToCart}>
      {t('addToCart')}
    </Button>
  );
};
```

### Interpolace hodnot

Vkl√°d√°n√≠ dynamick√Ωch hodnot do p≈ôeklad≈Ø:

```tsx
// V p≈ôekladu:
// "welcome": "V√≠tejte, {{name}}!"

const { t } = useTranslation();
t('welcome', { name: 'Jan' }); // -> "V√≠tejte, Jan!"
```

### Pluralizace

Podpora plur√°l≈Ø - v ƒçe≈°tinƒõ m≈Ø≈æeme pot≈ôebovat a≈æ t≈ôi formy:

```json
// cs.json
{
  "items": "{{count}} polo≈æka",
  "items_plural": "{{count}} polo≈æky",
  "items_plural_2": "{{count}} polo≈æek"
}
```

```tsx
const { t } = useTranslation();
t('items', { count: 1 }); // -> "1 polo≈æka"
t('items', { count: 3 }); // -> "3 polo≈æky"
t('items', { count: 5 }); // -> "5 polo≈æek"
```

## Dynamick√© p≈ôid√°v√°n√≠ p≈ôeklad≈Ø

P≈ôeklady lze p≈ôidat dynamicky pomoc√≠ funkce `updateTranslations`:

```tsx
import { updateTranslations } from '@/translations/i18n';

// P≈ôid√°n√≠ nov√Ωch p≈ôeklad≈Ø
updateTranslations('cs', 'newComponent', {
  newComponent: {
    title: 'Nov√Ω titulek',
    description: 'Nov√Ω popis'
  }
});
```

## P≈ôeklady v demo p≈ô√≠kladech

Pro demo p≈ô√≠klady je mo≈æn√© nastavit v√Ωchoz√≠ jazyk nebo povolit zmƒõnu jazyka:

```tsx
import { useTranslation } from 'react-i18next';

export const LanguageSwitcher = () => {
  const { i18n } = useTranslation();

  const changeLanguage = (lng: string) => {
    i18n.changeLanguage(lng);
  };

  return (
    <div>
      <button onClick={() => changeLanguage('cs')}>CS</button>
      <button onClick={() => changeLanguage('en')}>EN</button>
    </div>
  );
};
```

## Best Practices

1. **Vyhnout se hardcoded text≈Øm**
   - V≈°echny texty v UI by mƒõly b√Ωt lokalizovateln√©
   - Nepou≈æ√≠vejte hardcoded texty p≈ô√≠mo v komponent√°ch

2. **Znovupou≈æitelnost p≈ôeklad≈Ø**
   - Kategorizujte p≈ôeklady do namespaces podle komponent
   - Glob√°ln√≠ nebo sd√≠len√© p≈ôeklady um√≠stƒõte do `common.json`

3. **Poskytov√°n√≠ kontextu**
   - Pokud je pot≈ôeba poskytnout v√≠ce kontextu pro p≈ôekladatele, pou≈æijte koment√°≈ôe:
     ```json
     {
       "key": "value", // Kontext: Toto se pou≈æ√≠v√° v konkr√©tn√≠ situaci
     }
     ```

4. **Standardn√≠ form√°tov√°n√≠**
   - Pro data pou≈æijte https://date-fns.org/ s p≈ô√≠slu≈°nou lokalizac√≠
   - Pro ƒç√≠sla a mƒõny pou≈æijte `Intl.NumberFormat` API

5. **Testov√°n√≠**
   - Testujte komponenty s r≈Øzn√Ωmi jazyky
   - Ujistƒõte se, ≈æe UI spr√°vnƒõ funguje s r≈Øznƒõ dlouh√Ωmi texty

6. **Dokumentace**
   - Dokumentujte v≈°echny p≈ôekladov√© kl√≠ƒçe
   - Poskytnƒõte uk√°zky pou≈æit√≠ pro p≈ôekladatele

## P≈ô√≠stupnost a internacionalizace

1. **Smƒõr textu**
   - Podporujte RTL (right-to-left) jazyky, pokud je to pot≈ôeba
   - Pou≈æ√≠vejte CSS vlastnost `direction` a HTML atribut `dir`

2. **Jazykov√© atributy**
   - Nastavte HTML atribut `lang` na ko≈ôenov√©m elementu
   - Aktualizujte atribut p≈ôi zmƒõnƒõ jazyka:
     ```tsx
     useEffect(() => {
       document.documentElement.lang = i18n.language;
     }, [i18n.language]);
     ```

3. **Form√°tov√°n√≠ ƒç√≠sel a dat**
   - Pou≈æ√≠vejte lokalizovan√© form√°ty pro ƒç√≠sla a data
   - Respektujte kulturn√≠ rozd√≠ly (nap≈ô. oddƒõlovaƒçe tis√≠c≈Ø, form√°t data) 